<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover">
    <title>Parco Mezzi - CarMunfrà</title>
    <meta name="description" content="Noleggio furgoni e automobili per il trasporto di merci e persone in Piemonte, nel Monferrato e Casale. Scopri il nostro parco mezzi!">
<meta name="robots" content="follow, index">
<link rel="canonical" href="https://www.carmunfra.it/mezzi">
<meta name="keywords" content="noleggio furgoni, noleggio automobili, noleggio veicoli, trasporto merci, trasporto persone, Monferrato, Casale Monferrato">

<meta property="og:title" content="Parco Mezzi - CarMunfrà">
<meta property="og:description" content="Noleggio furgoni e automobili per il trasporto di merci e persone in Piemonte, nel Monferrato e Casale.">
<meta property="og:url" content="https://www.carmunfra.it/mezzi">
<% const imgIndex = Math.floor(Math.random() * veicoli.length); %>
<meta property="og:image" content="/img/mezzi/<%= veicoli[imgIndex]._id %>/2.jpg">

<script type="application/ld+json">
{
    "@context": "https://schema.org",
    "@type": "AutoRental",
    "name": "CarMunfrà",
    "url": "https://www.carmunfra.it",
    "logo": "https://www.carmunfra.it/wp-content/uploads/2023/02/cropped-logo.png",
    "description": "Noleggio furgoni e automobili per il trasporto di merci e persone in Piemonte, nel Monferrato e Casale.",
    "address": {
        "@type": "PostalAddress",
        "addressLocality": "Casale Monferrato",
        "addressRegion": "Piemonte",
        "addressCountry": "IT"
    },
    "openingHours": "Mo-Su 09:00-17:00",
    "telephone": "+39 0142 540773",
    "image": "https://www.carmunfra.it/img/mezzi/<%= veicoli[imgIndex]._id %>/2.jpg",
    "sameAs": [
        "https://www.instagram.com/carmunfra",
        "https://www.facebook.com/carmunfra"
    ]
}
</script>
    <link rel="stylesheet" href="/styles.css">
    <link rel="icon" href="/img/logo-icon.png" sizes="32x32">

    <style>
        @import url("https://fonts.googleapis.com/css2?family=Reddit+Mono:wght@200..900&display=swap");
        @import url('https://fonts.googleapis.com/css2?family=Reddit+Mono:wght@200..900&family=Rubik:ital,wght@0,300..900;1,300..900&display=swap');
        *{
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: "Rubik", sans-serif;
            font-optical-sizing: auto;
            font-style: normal;
            -webkit-tap-highlight-color: transparent;
            scroll-behavior: smooth;
        }
        body {
            background-color: #f4f4f4;
            color: #333;
            display: flex;
            flex-direction: column;
            min-height: 100dvh;
        }
        main{
            display: flex;
            justify-content: center;
            align-items: center;
            flex-direction: column;
            gap: 15px;
            margin-bottom: 50px;
            flex: 1;
        }
        main h1{
            text-align: center;
        }
        .filtersContainer{
            display: flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
        }
        #toggleFilters{
            cursor: pointer;
            transition: .25s;
        }
        #toggleFilters:hover{
            color: #7e4cce;
        }
        #toggleFilters span{
            font-size: 2.5rem;
        }
        #filters{
            max-width: 0;
            max-height: 0;
            opacity: 0;
            pointer-events: none;
            transition: .5s ease-in-out;
        }
        #filters.active{
            max-width: 100%;
            max-height: 600px;
            opacity: 1;
            pointer-events: all;
            background: #e6e3e3;
            padding: 15px;
            border-radius: 20px;
        }
        #filters form{
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: 15px;
        }
        #filters .field{
            display: flex;
        }
        #filters select{
            cursor: pointer;
        }
        #filters input, #filters select{
            min-width: 75px;
            outline: none;
            border: none;
            border-radius: 0 !important;
            border-bottom: 1px solid #7e4cce;
            color: #7e4cce;
            background: none;
            padding: 4px;
        }
        #filters input[type="number"]::-webkit-outer-spin-button,
        #filters input[type="number"]::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }

        #filters input[type="number"] {
            -moz-appearance: textfield;
        }
        #filtersErrorMessage:not(:empty){
            margin-top: 5px;
            text-align: right;
            color: rgb(155, 69, 69);
            opacity: .8;
        }
        @media (max-width: 1010px){
            .filtersContainer{
                flex-direction: column;
            }
            #filters form{
                display: grid;
                grid-template-columns: repeat(2, 1fr);
                grid-gap: 20px;
            }
            .field{
                width: 100%;
                display: flex;
                justify-content: space-between;
            }
            .field input,.field select{
                width: 130px;
            }
        }
        @media (max-width: 650px){
            #filters form{
                display: flex;
                align-items: flex-start;
                flex-direction: column;
            }
        }
        .overlay{
            background: #f4f4f4;
            border-radius: 20px;
            animation: appear-overlay linear;
            --animation-timeline: view();
            --animation-range: entry 0 cover 25%;
            animation-timeline: var(--animation-timeline);
            animation-range: var(--animation-range);
            transition: transform .25s;
        }
        .mezzoRow{
            --animation-timeline: view();
            --animation-range: entry 0 cover 25%;
            position: relative;
            max-width: 1000px;
            width: 100%;
            max-height: 800px;
            background: #e6e3e3;
            transform: translateX(0);
            display: flex;
            gap: 20px;
            padding: 20px;
            border-radius: 20px;
            filter: drop-shadow(5px 10px 10px #00000068);
            animation: appear-opacity linear;
            animation-timeline: var(--animation-timeline);
            animation-range: var(--animation-range);
            transition: opacity .75s ease-in-out, max-height .75s ease-in-out, padding .75s ease-in-out, transform .75s ease-in-out;
        }
        .overlay:has(.first-row-visible){
            transition: .5s;
            animation: none;
            --animation-timeline: none;
            --animation-range: none;
            animation-timeline: var(--animation-timeline);
            animation-range: var(--animation-range);
            
        }
        .first-row-visible {
            --animation-timeline: none;
            --animation-range: none;
            transform: translateX(0);
            animation: none;
            transition: .5s;
        }
        
        .mezzoRow.hidden{
            opacity: 0;
            max-height: 0;
            padding: 0;
            transform: translateX(-200%);
        }
        @keyframes appear-opacity {
            from{
                opacity: 0;
            }
            to{
                opacity: 1;
            }
        }
        
        @keyframes appear-overlay {
            from{
                transform: translateX(-200%);
            }
            to{
                transform: translateX(0);
            }
        }

        .mezzoRow img{
            max-width: 500px;
            width: 100%;
            object-fit: cover;
            object-position: left center;
            border-radius: 10px;
        }
        .fade-in {
            opacity: 0;
            transition: opacity 0.5s ease-in;
        }
        
        .fade-in.visible {
            opacity: 1;
        }

        .mezzoRowRightSide h2{
            text-transform: uppercase;
        }
        .mezzoDescription{
            margin-top: 25px;
            font-size: clamp(.65rem, 3vw, 1rem);
        }
        .mezzoDescription::first-letter{
            text-transform: uppercase;
        }
        .prices{
            margin-top: 15px;
        }
        .prices h3{
            display: flex;
            font-size: 1.2rem;
            user-select: none;
        }
        .prices h3 details{
            position: relative;
            transition: .25s;
        }
        details summary::-webkit-details-marker {
            display: none;
        }
        .prices h3 details summary{
            list-style: none;
            cursor: pointer;
            transition: .5s;
        }
        .prices h3 details summary span{
            font-weight: 500;
        }
        .prices h3 details summary:hover{
            color: #7e4cce;
        }

        .prices h3 details .info-message{
            position: absolute;
            top: calc((1.2rem / 2) + 8px);
            left: 18px;
            width: 200px;
            font-size: clamp(.75rem, 2vw, 1rem);
            font-weight: 400;
            line-height: calc(1rem + 7px);
            background: #e6e3e3;
            border-radius: 13px;
            border-top-left-radius: 0;
            border: 2px solid #333;
            padding: 10px;
            filter: drop-shadow(15px 15px 10px #00000054);
            user-select: text;
        }
        .prices ul{
            list-style: none;
            text-transform: capitalize;
            font-size: clamp(.65rem, 3vw, 1rem);
        }
        .budgetElement:not(:empty){
            margin-top: 15px;
            font-size: clamp(.55rem, 3vw, .9rem);
            opacity: .7;
        }
        .btnContainer{
            width: 100%;
            display: flex;
            justify-content: flex-end;
            margin-top: 25px;
            align-items: center;
        }
        .viewBtn{
            padding: 10px 20px;
            background: #7e4cce;
            color: #f4f4f4;
            text-decoration: none;
            border-radius: 5px;
            font-size: 1.1rem;
            font-weight: 600;
            letter-spacing: 1px;
            transition: .5s;
            border: 2px solid #7e4cce;
        }
        .viewBtn:hover{
            background: #f4f4f4;
            color: #7e4cce;
        }

        .scroll-alert{
            position: fixed;
            bottom: 15px;
            z-index: -1;
            background: #e6e3e3;
            color: #7e4cce;
            padding: 15px;
            border-radius: 50%;
            display: flex;
            flex-direction: column;
            cursor: pointer;
            animation: alert .75s ease-in-out infinite;
            transition: .5s ease-in-out;
        }
        .scroll-alert span{
            font-size: 2rem;
        }
        .alert-left{
            left: 25px;
        }
        .alert-right{
            right: 25px;
        }
        @keyframes alert {
            0%{
                scale: 1;
            }
            50%{
                scale: .75;
            }
            100%{
                scale: 1;
            }
        }
        .scroll-alert.hidden{
            opacity: 0;
        }
        .scroll-alert.upDirection{
            transform: rotateZ(180deg);
        }
        @media (max-width: 1200px) {
            .scroll-alert{
                display: none;
            }
        }
        @media (max-width: 900px) {
            .mezzoRow{
                max-width: 600px;
                flex-direction: column;
                align-items: center;
            }
        }
        @media (max-width: 430px) {
            .mezzoRowRightSide h2{
                text-align: center;
            }
            .btnContainer{
                justify-content: center;
            }
            .viewBtn{
                position: relative;
                bottom: 0;
                right: 0;
            }
        }
        
    </style>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
</head>
<body>
    <%- include('components/header.ejs') %>
    <main>
        <script>
        document.addEventListener('DOMContentLoaded', () => {
            let prevElement, prevOverlayElement, prevFirstElement;
            function checkVisibility() {
                if(window.scrollY != 0) return;
                const rows = document.querySelectorAll('.mezzoRow:not(.hidden)');
                if(!rows) return;
                if(prevFirstElement) prevFirstElement.classList.remove('first-row-visible');
                
                let element = rows[1];
                if(!element) element = rows[0];

                const overlayElement = element.closest('.overlay');
                if(prevElement && prevOverlayElement){
                    prevElement.style.animation = 'appear-opacity linear';
                    prevElement.style.animationTimeline = 'view()';
                    prevElement.style.animationRange = 'entry 0 cover 25%';
                    prevOverlayElement.style.animation = 'appear-overlay linear';
                    prevOverlayElement.style.animationTimeline = 'view()';
                    prevOverlayElement.style.animationRange = 'entry 0 cover 25%';
                    prevOverlayElement.style.transform = '';
                }
                
                prevFirstElement = rows[0];
                prevElement = element;
                prevOverlayElement = overlayElement;
                const rect = element.getBoundingClientRect();
                const elementHeight = rect.height;
                    
                const visibleHeight = Math.max(0, Math.min(window.innerHeight, rect.bottom) - Math.max(0, rect.top));
                const visiblePercentage = (visibleHeight / elementHeight) * 100;
                if (visiblePercentage > 10 && window.scrollY === 0) {
                    overlayElement.style.transform = 'translateX(0)'; 
                    element.style.animation = 'none';
                    element.style.animationTimeline = 'none';
                    element.style.animationRange = 'none'
                    overlayElement.style.animation = 'none';
                    overlayElement.style.animationTimeline = 'none';
                    overlayElement.style.animationRange = 'none'
                } else if (visiblePercentage < 10 && window.scrollY === 0) {
                    element.style.animation = 'appear-opacity linear';
                    element.style.animationTimeline = 'view()';
                    element.style.animationRange = 'entry 0 cover 25%';
                    overlayElement.style.animation = 'appear-overlay linear';
                    overlayElement.style.animationTimeline = 'view()';
                    overlayElement.style.animationRange = 'entry 0 cover 25%';
                    overlayElement.style.transform = '';
                }
                rows[0].closest('.overlay').style = '';
                rows[0].style = '';
                rows[0].classList.add('first-row-visible');
            }
            function debounce(func, delay) {
                  let timeout;
                  return function(...args) {
                    clearTimeout(timeout);
                    timeout = setTimeout(() => func.apply(this, args), delay);
                  };
                }
                const debouncedCheckVisibility = debounce(checkVisibility, 600);
            window.addEventListener('scroll', debounce(checkVisibility, 300));
            window.addEventListener('resize', debounce(checkVisibility, 100));
            checkVisibility()
            const filtersErrorMessage = document.getElementById('filtersErrorMessage');
            const toggleFilters = document.getElementById('toggleFilters');
            toggleFilters.addEventListener('click', () => {
                const filters = document.getElementById('filters');
                if(!filters.classList.contains('active')){
                    filters.classList.add('active');
                }else{
                    filtersErrorMessage.innerText = '';
                    filters.classList.remove('active');
                }
            });
            

                const typeFilterInput = document.getElementById('mezzoType');
                const fromDateFilterInput = document.getElementById('fromDate');
                const toDateFilterInput = document.getElementById('toDate');
                const budgetFilterInput = document.getElementById('budget');
                

                const filter = () => {
                    const rows = document.querySelectorAll('.mezzoRow');
                    const typeFilter = typeFilterInput.value;
                    const fromDateFilter = new Date(fromDateFilterInput.value);
                    const toDateFilter = new Date(toDateFilterInput.value);
                    const budgetFilter = budgetFilterInput.value;
                    let isFilteringDate = fromDateFilter != 'Invalid Date' && toDateFilter != 'Invalid Date';
                    
                    if(!isFilteringDate && budgetFilter){
                        filtersErrorMessage.innerText = 'Per calcolare il prezzo inserire data di inizio e di fine noleggio.';
                    }else{
                        if(isFilteringDate && (toDateFilter < fromDateFilter)){
                            filtersErrorMessage.innerText = 'La data di fine noleggio deve essere dopo quella di inizio.';
                        }else{
                            filtersErrorMessage.innerText = '';
                        }
                        
                    }
                    
                    for(const row of rows){
                        const matchType = row.dataset.type == typeFilter || typeFilter == 'all';
                        let unavailable = false;
                        let isInBudget = true;

                        if(isFilteringDate){
                            const bookings = JSON.parse(row.dataset.bookings);
                            for(const book of bookings){
                                const bookFromDate = new Date(book.fromDate);
                                const bookToDate = new Date(book.toDate);

                                if((fromDateFilter >= bookFromDate && fromDateFilter <= bookToDate) || 
                                    (toDateFilter >= bookFromDate && toDateFilter <= bookToDate) ||
                                    (fromDateFilter <= bookFromDate && toDateFilter >= bookToDate)) {
                                    unavailable = true;
                                    break;
                                }
                            }
                        }
                        if(budgetFilter && isFilteringDate && !unavailable){
                            const prices = JSON.parse(row.dataset.prices);
                            let startDay = new Date(fromDateFilter).getDay() - 1;
                            startDay = startDay < 0 ? 6 : startDay;
                        
                            let totalDays = Math.floor((new Date(toDateFilter) - new Date(fromDateFilter)) / (1000 * 60 *60 *24)) + 1;
                        
                            const finalPrice = Array.from({ length: totalDays }, () => prices[startDay++ % 7]).reduce((a, b) => a + b, 0);
                            isInBudget = finalPrice <= budgetFilter;
                            const [kmIncluded, kmPrice] = row.dataset.kmprices.split(' ');
                            row.querySelector('.budgetElement').innerHTML = `Prezzo a partire da soli ${finalPrice.toFixed(2)}€ + IVA, con ${kmIncluded} km inclusi.<br> Kilometri extra a ${kmPrice}€/km + IVA.`
                        }
                        if(matchType && (!isFilteringDate || (isFilteringDate && !unavailable)) && isInBudget){
                            row.classList.remove('hidden');
                        }else{
                            row.classList.add('hidden');
                        }
                    }
                    const hiddenRows = document.querySelectorAll('.mezzoRow.hidden');
                    if(hiddenRows.length == rows.length){
                        document.querySelector('.noElementShown').classList.add('active');
                    }else{
                        document.querySelector('.noElementShown').classList.remove('active');
                    }
                    function debounce(func, delay) {
                  let timeout;
                  return function(...args) {
                    clearTimeout(timeout);
                    timeout = setTimeout(() => func.apply(this, args), delay);
                  };
                }
                    window.scrollTo.pageYOffset= 0;
                    debouncedCheckVisibility();
                }



                const debouncedFilter = debounce(filter, 1000);

                typeFilterInput.addEventListener('change', filter);
                fromDateFilterInput.addEventListener('input', filter);
                toDateFilterInput.addEventListener('input', filter);
                budgetFilterInput.addEventListener('input', debouncedFilter);
            });
        </script>
        <h1 style="text-transform: uppercase;">
            Parco Mezzi CarMunfrà
        </h1>

        <% const types = veicoli
            .map(obj => obj.type)
            .filter((value, index, self) => self.indexOf(value) === index); 
        %>
        <div class="filtersContainer">
            <div id="toggleFilters">
                <span class="material-symbols-rounded">
                    tune
                </span>
            </div>
            <div id="filters" class="filters">
                <form onsubmit="event.preventDefault()">
                    <div class="field">
                        <label for="mezzoType">Tipo: </label>
                        <select id="mezzoType"  style="text-transform: capitalize;">
                            <option value="all">Tutti</option>
                            <% for(const type of types){ %>
                                <option value="<%= type %>"><%= type %></option>
                            <% } %>
                        </select>
                    </div>
                    <div class="field">
                        <label for="fromDate">Spesa Massima: </label>
                        <input type="number" id="budget" min="0">
                    </div>
                    <div class="field">
                        <label for="fromDate">Inizio Noleggio: </label>
                        <input type="date" id="fromDate" min="<%= new Date(new Date().setDate(new Date().getDate() + 1)).toISOString().split('T')[0] %>">
                    </div>
                    <div class="field">
                        <label for="fromDate">Fine Noleggio: </label>
                        <input type="date" id="toDate" min="<%= new Date(new Date().setDate(new Date().getDate() + 1)).toISOString().split('T')[0] %>">
                    </div>
                </form>
                <p id="filtersErrorMessage"></p>
            </div>
        </div>

        <style>
            .noElementShown{
                opacity: 0;
                pointer-events: none;
                border-bottom: 2px dashed #333;
                position: relative;
                width: 100%;
                height: 0px;
                display: flex;
                align-items: flex-end;
                /* filter:  drop-shadow(10px 10px 10px #0000009f); */
                overflow: hidden;
                transition: .5s ease-in-out;
            }
            .noElementShown.active{
                opacity: 1;
                pointer-events: all;
                height: 150px;
            }
            .noElementShown h3{
                width: 100%;
                text-align: center;
                opacity: .8;
            }
            .noElementShown.active img{
                position: absolute;
                transform: translateX(calc(100vw + var(--mezzo) * 250px));
                animation: 
                    driving 20s infinite ease,
                    shaking 1s infinite ease-in-out calc(.55s * var(--mezzo));
            }
            .noElementShown.active img:nth-child(2){
                filter: brightness(80%) saturate(320%);
            }
            .noElementShown.active img:nth-child(3){
                filter: saturate(520%);
            }
            .noElementShown.active img:nth-child(4){
                filter: brightness(115%) saturate(200%);
            }
            @keyframes shaking {
                0%{
                    scale: 1;
                }
                50%{
                    scale: 1.005;
                }
                100%{
                    scale: 1;
                }
            }
            @keyframes driving {
                0% {
                    transform: translateX(calc(100vw + var(--mezzo) * 250px));
                }
                25% {
                    transform: translateX(calc(25vw + var(--mezzo) * 250px));
                }
                45% {
                    transform: translateX(calc(-100vw + var(--mezzo) * 250px));
                }
                50% {
                    transform: translateX(calc(-100vw + var(--mezzo) * 250px)) rotateY(180deg);
                }
                60% {
                    transform: translateX(calc(0px - var(--mezzo) * 250px)) rotateY(180deg);
                }
                85% {
                    transform: translateX(calc(100vw + var(--mezzo) * 250px)) rotateY(180deg);
                }
                100% {
                    transform: translateX(calc(100vw + var(--mezzo) * 250px));
                }
            }
        </style>
        <div class="noElementShown">
            <h3>Purtroppo nessun mezzo rispetta i criteri di ricerca.</h3>
            <img src="/img/furgone-blu-logo.png" alt="" width="200px" style="--mezzo: 1;">
            <img src="/img/furgone-rosso-logo.png" alt="" width="200px" style="--mezzo: 2;">
            <img src="/img/furgone-giallo-logo.png" alt="" width="200px" style="--mezzo: 3;">
        </div>

        <% const days = ['lunedì', 'martedì', 'mercoledì', 'giovedì', 'venerdì', 'sabato', 'domenica']; %>
        <% let num = 0; %>
        <% for(const mezzo of veicoli) { %>
            <div class="overlay">
                <article class="mezzoRow" id="row_<%= num++ %>" data-type="<%= mezzo.type %>" data-bookings="<%= JSON.stringify(mezzo.bookings) %>" data-prices="<%= JSON.stringify(mezzo.daysPrices) %>" data-kmprices="<%= mezzo.kmIncluded %> <%= mezzo.kmPrice.toFixed(2) %>">
                    <img alt="<%= mezzo.marca %> <%= mezzo.modello %>" loading="lazy" data-image="/img/mezzi/<%= mezzo._id %>/2.jpg">
                    <section class="mezzoRowRightSide">
                        <h2><%= mezzo.marca %> <%= mezzo.modello %></h2>
                        <p class="mezzoDescription"><%= mezzo.descrizione %></p>
                        <div class="prices">
                            <h3>
                                <details>
                                    <summary>
                                        <span class="material-symbols-outlined">
                                            info
                                        </span>
                                    </summary>
                                    <div class="info-message">
                                        <p>Il prezzo può variare in base al numero di km oltre a quelli inclusi (<%= mezzo.kmIncluded %> km) di <%= mezzo.kmPrice.toFixed(2) %>€/km</p>
                                    </div>
                                </details>
                                Prezzi
                            </h3>
                            <ul>
                                <% for (let [weekDays, price] of Object.entries(mezzo.daysPrices)) { %>
                                    <li><%= days[weekDays] %>: <s><%= mezzo.discountedDays.includes(weekDays) ? `${((price + (price * mezzo.discount) / 100 + 2.5) / 5 | 0) * 5 + (price === ((price + (price * mezzo.discount) / 100 + 2.5) / 5 | 0) * 5 ? 5 : 0)} €` : '' %></s> <%= price %> € </li>
                                <% } %>
                            </ul>
                            <p class="budgetElement"></p>
                        </div>
                        <div class="btnContainer">
                            <a href="/mezzo?id=<%= mezzo._id %>" class="viewBtn">Prenota ora!</a>
                        </div>
                    </section>
                </article>
            </div>
        <% } %>
        <div class="scroll-alert alert-left">
            <span class="material-symbols-rounded">
                keyboard_arrow_down
            </span>
        </div>
        <div class="scroll-alert alert-right">
            <span class="material-symbols-rounded">
                keyboard_arrow_down
            </span>
        </div>
    </main>
    <script>
        let lastScrollTop = 0;

        document.addEventListener('scroll', function() {
            var fixedElements = document.querySelectorAll('.scroll-alert');
            var container = document.querySelector('main');
            var containerRect = container.getBoundingClientRect();
            const currentScrollTop = window.pageYOffset || document.documentElement.scrollTop;
            for (const fixedElement of fixedElements) {
                var rect = fixedElement.getBoundingClientRect();
            
                if (rect.top + rect.height < containerRect.top || rect.bottom > containerRect.bottom) {
                    fixedElement.classList.add('hidden');
                } else {
                    fixedElement.classList.remove('hidden');
                }
            
                if (currentScrollTop > lastScrollTop || currentScrollTop == 0) {
                    fixedElement.classList.remove('upDirection');
                } else {
                    fixedElement.classList.add('upDirection');
                }
            }
        
            lastScrollTop = currentScrollTop <= 0 ? 0 : currentScrollTop;
        });
    </script>
    <script>
document.addEventListener('DOMContentLoaded', function() {
    const images = document.querySelectorAll('.mezzoRow img');

    const observer = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const img = entry.target;
                img.src = img.dataset.image;
                img.classList.add('visible');
                observer.unobserve(img);
            }
        });
    }, {
        rootMargin: '0px 0px 100px 0px',
        threshold: 0.1
    });

    images.forEach(img => {
        img.classList.add('fade-in');
        observer.observe(img);
    });
});

    </script>
    <%- include('components/footer.ejs') %>
</body>
</html>
