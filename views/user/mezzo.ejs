<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= mezzo.marca %> <%= mezzo.modello %></title>
    <link rel="stylesheet" href="/styles.css">
    <style>
        @import url("https://fonts.googleapis.com/css2?family=Reddit+Mono:wght@200..900&display=swap");
        @import url('https://fonts.googleapis.com/css2?family=Reddit+Mono:wght@200..900&family=Rubik:ital,wght@0,300..900;1,300..900&display=swap');
        *{
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: "Rubik", sans-serif;
            font-optical-sizing: auto;
            font-style: normal;
            -webkit-tap-highlight-color: transparent;
            scroll-behavior: smooth;
        }
        body {
            background-color: #f4f4f4;
            color: #333;
        }
        .container {
            max-width: 900px;
            margin: 50px auto;
            padding: 20px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
        }
        .mezzo-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        .mezzo-header h1 {
            margin: 0;
            font-size: 2.5em;
        }
        .mezzo-details {
            display: flex;
            justify-content: space-between;
            gap: 20px;
        }
        .mezzo-info {
            flex: 1;
        }
        .mezzo-info p {
            font-size: 1.1em;
            line-height: 1.6em;
        }
        .mezzo-pricing {
            flex: 1;
            background: #f9f9f9;
            padding: 20px;
            border-radius: 8px;
        }
        .mezzo-pricing h3 {
            margin-top: 0;
            font-size: 1.5em;
            color: #555;
        }
        .mezzo-pricing ul {
            list-style: none;
        }
        .mezzo-pricing p {
            font-size: 1.2em;
        }
        .calendar-box {
            margin-top: 30px;
            padding: 20px;
            background: #eef;
            border-radius: 8px;
            text-align: center;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-direction: column;
        }
        .calendar-box p {
            font-size: 1.2em;
            color: #333;
        }


        .calendarWrapper{
    max-width: 450px;
    width: 100%;
    border-radius: 10px;
    font-family: 'Poppins', 'sans-serif';
}
.calendarWrapper .calendarHead{
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 25px 30px 10px;
}
.calendarHead .current-date{
    text-transform: capitalize;
    font-size: 1.45rem;
    font-weight: 500;
}
.calendarHead .calendarIcons span{
    height: 38px;
    width: 38px;
    margin: 0 1px;
    text-align: center;
    line-height: 38px;
    border-radius: 50%;
    cursor: pointer;
    color: #878787;
    font-size: 1.9rem;
    user-select: none;
    transition: .4s ease-in-out;
}
.calendarHead .calendarIcons span:hover{
    background: #7e4cce;
    color: #cccbcb;
}
.calendarHead .calendarIcons span:first-child:hover{
    transform: translateX(-3px);
}
.calendarHead .calendarIcons span:last-child:hover{
    transform: translateX(3px);
}
.calendarMain{
    padding: 20px;
}
.calendarMain ul{
    display: flex;
    list-style: none;
    flex-wrap: wrap;
    text-align: center;
}
.calendarMain .days{
    margin-bottom: 20px;
    z-index: -1;
}
.calendarMain .weeks li{
    font-weight: 500;
}
.calendarMain ul li{
    position: relative;
    width: calc( 100% / 7);
}
.calendarMain .days li{
    cursor: pointer;
    margin-top: 30px;
    z-index: 0;
    transition: color .5s;
}
.days li.inactive{
    color: #aaa;
}
.days li.expired{
    color: #aaa;
    cursor: auto;
    pointer-events: none;
    background: none;
}
.days li{
    user-select: none;
}
.days li.active{
    color: #fff;
}
.calendarMain .days li::before{
    position: absolute;
    content: '';
    border-radius: 50%;
    height: 40px;
    width: 40px;
    top: 50%;
    left: 50%;
    z-index: -1;
    transform: translateX(-50%) translateY(-50%);
    transition: background .3s;
}

.days li:hover::before{
    background: #af95db;
}
.days li:hover{
    color: #f2f2f2;
}
.days li.active::before{
    background: rgb(26, 204, 26);
}
.days li.booked{
    cursor: auto;
    pointer-events: none;
}
.days li.booked::before{
    background: #7B0828;
}
.days li.booked.inactive::before{
    background: #7B0828;
    opacity: .6;
}
.days li.booked:not(.inactive){
    color: #f2f2f2;
}

.days li.selected::before{
    background: #7e4cce;
}
.days li.selected{
    color: #f2f2f2;
}

#userForm {
    max-width: 450px;
    width: 100%;
    border-radius: 10px;
    font-family: 'Poppins', 'sans-serif';
    overflow: hidden;
    position: relative;
}

#userForm .pagesContainer {
    width: calc(100% * var(--pages));
    height: max-content;
    display: flex;
    align-items: center;
    overflow: hidden;
}

#userForm .page {
    width: 100%;
    height: 328px;
    padding: 15px;
    margin: 0;
    transition: transform 0.5s ease, opacity 0.5s ease;
    opacity: 0;
    transform: translateX(100%);
    z-index: 0;
    display: flex;
    justify-content: center;
    flex-direction: column;
    gap: 8px;
}

#userForm .page.active {
    opacity: 1;
    transform: translateX(calc(var(--page) * -100%));
    z-index: 165;
}

#userForm .page .field{
    display: flex;
    justify-content: space-between;
}
#userForm .page .field:has(input[type="file"]){
    align-items: center;
}
#userForm .page .field:not(.termsField) > *:where(select, input:not([type="checkbox"] [type="file"])){
    max-width: 150px;
    width: 100%;
    padding: 5px;
    background: none;
    outline: none;
    border: none;
    border-bottom: 1px solid #333;
}
#userForm .page .field:not(.termsField) > *:where(select, input:not([type="checkbox"])).show-error:invalid{
    border-bottom: 1px solid red;
}
#userForm .page .field label{
    position: relative;
}
#userForm .page .field label sup{
    position: absolute;
    left: -8px;
    font-size: 1rem;
    color: #7B0828;
}

.custom-file-upload input[type="file"] {
    display: none;
}

.custom-file-upload {
    display: inline-block;
    position: relative;
    cursor: pointer;
    background-color: #7e4cce;
    color: #f2f2f2;
    padding: 10px 20px;
    border-radius: 5px;
    text-align: center;
    font-family: 'Poppins', sans-serif;
}

.custom-file-upload label {
    display: flex;
    align-items: center;
    gap: 10px;
    cursor: pointer;
}
#userFormBtn{
    opacity: 0;
    pointer-events: none;
    outline: none;
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    background: #7e4cce;
    color: #f2f2f2;
    cursor: pointer;
    transition: opacity .25s, transform .25s;
}
#userFormBtn:hover{
    transform: scaleX(1.2) scaleY(1.1);
}
.formIconContainer{
    margin-top: 10px;
    user-select: none;
    display: flex;
    gap: 25px;
}
.formIconContainer span{
    position: relative;
    opacity: 1;
    pointer-events: all;
    cursor: pointer;
    user-select: none;
    transition: opacity .5s ease-in-out;
    z-index: 1;
    color: #333;
}

.formIconContainer span::before{
    position: absolute;
    content: '';
    border-radius: 50%;
    height: 40px;
    width: 40px;
    top: 50%;
    left: 50%;
    z-index: 0;
    transform: translateX(-50%) translateY(-50%);
    background: rgb(164, 164, 162);
    opacity: .5;
}

p.loginAlert{
    margin-top: 20px;
    font-size: .8rem;
}
.accountLink{
    color: #7e4cce;
    font-weight: 500;
    cursor: pointer;
}
.formIconContainer span.disabled{
    opacity: 0;
    pointer-events: none;
}
#userForm .buttonContainer{
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: 10px;
}
.field.termsField{
    width: 100%;
    position: absolute;
    bottom: 0;
    left: 0;
    display: flex;
    justify-content: center !important;
    gap: 5px;
    color: #bcb9b9;
    margin-bottom: 15px;
}
.field.termsField > input{
    cursor: pointer;
    accent-color: #7e4cce;
    background: red;
}
@media (max-width: 480px){
    .mezzo-details {
        flex-direction: column;
    }


    .calendarWrapper .calendarHead{
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 15px 20px 0px;
    }
    .calendarHead .current-date{
        font-size: 1.25rem;
    }

    .calendarMain .days li::before{
        height: 35px;
        width: 35px;
    }
    .calendarHead .calendarIcons span{
        height: 25px;
        width: 25px;
        line-height: 25px;
        font-size: 1.4rem;
    }
    .calendarMain{
        padding: 10px;
    }
    #preventivoElement, p.loginAlert, .calendar-box > p{
        width: 100%;
        font-size: .5rem;
    }
}
#loginModal{
position: fixed;
top: 0;
left: 0;
width: 100%;
height: 100%;
display: flex;
align-items: center;
justify-content: center;
opacity: 0;
pointer-events: none;
transition: opacity .5s;
}
#loginModal.active{
    opacity: 1;
    pointer-events: all;
}
#loginModal section{
    max-width: 400px;
    width: 100%;
    background: #f2f2f2;
    overflow: hidden;
}
#loginModal section .formsContainer{
    width: calc(100% * var(--pages));
    height: max-content;
    display: flex;
    align-items: center;
    overflow: hidden;
}
#loginModal section .formsContainer .authForm {
    width: 100%;
    height: 328px;
    transform: translateX(100%);
    border: 2px solid red;
    /* transform: translateX(200%); */

    display: flex;
    justify-content: center;
    flex-direction: column;
    overflow: hidden;
    padding: 15px;
}
#loginForm{
    transform: translateX(0);
}
#loginOtpForm{
    /* opacity: 0; */
    /* pointer-events: none; */
    transition: opacity .5s;
}
#loginOtpForm.active{
    opacity: 1;
    pointer-events: all;
    transition: opacity .5s;
}
    </style>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0" />

</head>
<body>
    <div class="container">
        <div class="mezzo-header">
            <h1><%= mezzo.marca %> <%= mezzo.modello %></h1>
        </div>
        
        <div class="mezzo-details">
            <div class="mezzo-info">
                <h2>Descrizione</h2>
                <p><%= mezzo.descrizione %></p>
            </div>
            <div class="mezzo-pricing">
                <h3>Prezzi e Dettagli</h3>
                <p>Chilometri inclusi: <%= mezzo.kmIncluded %> km</p>
                <p>Costo per chilometro extra: €<%= mezzo.kmPrice %></p>
                <h4>Tariffe giornaliere:</h4>
                <ul>
                    <% const weekDays = ['lunedì', 'martedì', 'mercoledì', 'giovedì', 'venerdì', 'sabato', 'domenica'] %>
                    <% for (let [days, price] of Object.entries(mezzo.daysPrices)) { %>
                        <li class="price" data-price="<%= price %>"><%= weekDays[days] %>: <s><%= mezzo.discountedDays.includes(days) ? `${price + (price * mezzo.discount)/100} €` : '' %></s> <%= price %> € </li>
                    <% } %>
                </ul>
            </div>
        </div>
        
        <div class="calendar-box">
            <p>Selezionare data di inizio e di fine noleggio:</p>
            
            <div class="calendarWrapper">
                <div class="calendarHead">
                    <p class="current-date"></p>
                    <div class="calendarIcons">
                        <span id="prev" class="material-symbols-outlined" style="display: none;">
                            chevron_left
                        </span>
                        <span id="next" class="material-symbols-outlined">
                            chevron_right
                        </span>
                    </div>
                </div>
                <div class="calendarMain">
                    <ul class="weeks">
                        <li>Lun</li>
                        <li>Mar</li>
                        <li>Mer</li>
                        <li>Gio</li>
                        <li>Ven</li>
                        <li>Sab</li>
                        <li>Dom</li>
                    </ul>
                    <ul class="days">
                    </ul>
                </div>
            </div>
            <p id="preventivoElement"></p>

            <form id="userForm" enctype="multipart/form-data" style="display: none;">
                <input type="hidden" name="id" value="<%= mezzo._id %>">
                <input type="hidden" name="fromDate">
                <input type="hidden" name="toDate">
                <div class="pagesContainer" style="--pages: 4">
                    <section class="page page1" style="--page: 0">
                        <div class="field">
                            <label title="Campo Obbligatorio"><sup>*</sup>Nome:</label>
                            <input type="text" name="nome" required>
                        </div>
                        <div class="field">
                            <label title="Campo Obbligatorio"><sup>*</sup>Cognome:</label>
                            <input type="text" name="cognome" required>
                        </div>
                        <div class="field">
                            <label title="Campo Obbligatorio"><sup>*</sup>Codice Fiscale:</label>
                            <input type="text" name="cf" required>
                        </div>
                        <div class="field">
                            <label>Codice Univoco:</label>
                            <input type="text" name="cUnivoco">
                        </div>
                        <div class="field">
                            <label>Partita IVA:</label>
                            <input type="text" name="pIva">
                        </div>
                    </section>
                    <section class="page page2" style="--page: 1">
                        <div class="field">
                            <label title="Campo Obbligatorio"><sup>*</sup>Via:</label>
                            <input type="text" name="residenza[via]" required>
                        </div>
                        <div class="field">
                            <label title="Campo Obbligatorio"><sup>*</sup>Civico:</label>
                            <input type="text" name="residenza[nCivico]" required>
                        </div>
                        <div class="field">
                            <label title="Campo Obbligatorio"><sup>*</sup>CAP:</label>
                            <input type="text" name="residenza[cap]" required>
                        </div>
                        <div class="field">
                            <label title="Campo Obbligatorio"><sup>*</sup>Comune:</label>
                            <input type="text" name="residenza[comune]" required>
                        </div>
                        <div class="field">
                            <label title="Campo Obbligatorio"><sup>*</sup>Provincia:</label>
                            <input type="text" name="residenza[provincia]" required>
                        </div>
                        <div class="field">
                            <label title="Campo Obbligatorio"><sup>*</sup>Email:</label>
                            <input type="email" name="contatti[email]" required>
                        </div>
                        <div class="field">
                            <label title="Campo Obbligatorio"><sup>*</sup>Tel:</label>
                            <input type="tel" name="contatti[tel]" required>
                        </div>
                        <div class="field">
                            <label >Pec:</label>
                            <input type="text" name="contatti[pec]">
                        </div>
                    </section>
                    <section class="page page3" style="--page: 2">
                        <div class="field">
                            <label title="Campo Obbligatorio"><sup>*</sup>Numero Patente:</label>
                            <input type="text" name="patente[numero]" required>
                        </div>
                        <div class="field">
                            <label>Rilasciata Da:</label>
                            <input type="text" name="patente[daUfficio]">
                        </div>
                        <div class="field">
                            <label title="Campo Obbligatorio"><sup>*</sup>Rilascio Patente:</label>
                            <input type="date" name="patente[rilascio]" required>
                        </div>
                        <div class="field">
                            <label title="Campo Obbligatorio"><sup>*</sup>Scadenza:</label>
                            <input type="date" name="patente[scadenza]" required>
                        </div>
                    </section>
                    <section class="page page4" style="--page: 3">
                        <div class="field">
                            <label title="Campo Obbligatorio"><sup>*</sup>Fronte Patente:</label>
                            <div class="custom-file-upload">
                                <input type="file" class="licenseFile" name="licenseFront" id="licenseFront"  accept="image/jpeg, image/png" required>
                                <label for="licenseFront">
                                    <span class="material-symbols-outlined upload-icon">
                                        upload_file
                                    </span>
                                    <span class="upload-text">Carica foto</span>
                                </label>
                            </div>
                        </div>
                        <div class="field">
                            <label title="Campo Obbligatorio"><sup>*</sup>Retro Patente:</label>
                            <div class="custom-file-upload">
                                <input type="file" class="licenseFile" name="licenseBack" id="licenseBack"  accept="image/jpeg, image/png" required>
                                <label for="licenseBack">
                                    <span class="material-symbols-outlined upload-icon">
                                        upload_file
                                    </span>
                                    <span class="upload-text">Carica foto</span>
                                </label>
                            </div>
                        </div>
                        <div class="field termsField">
                            <label title="Campo Obbligatorio"><sup>*</sup>Accetto Termini e Condizioni:</label>
                            <input type="checkbox" name="terms" required>
                        </div>
                    </section>
                </div>
                
                <div class="buttonContainer">
                    <button id="userFormBtn" type="submit">Paga</button>
                    <div class="formIconContainer">
                        <span id="prevFormPage" class="material-symbols-outlined disabled">
                            chevron_left
                        </span>
                        <span id="nextFormPage" class="material-symbols-outlined">
                            chevron_right
                        </span>
                    </div>
                </div>
                <% if (!isLoggedIn) { %>
                    <p class="loginAlert">Per semplificare il checkout in futuro <a class="accountLink" id="signup">Crea un Account</a> o se lo hai già <a class="accountLink" id="login">Accedi</a></p>
                <% } %>
            </form>
        </div>
    </div>
    <script>
        const licenseFileInputs = document.querySelectorAll('.licenseFile');
        for(const input of licenseFileInputs){
            input.addEventListener('change', () => {
                const label = document.querySelector(`label[for="${input.name}"]`);
                label.childNodes[1].innerText = 'done_outline';
                label.childNodes[3].innerText = 'Caricata'
            })
        }
    </script>
    <script>
        const prevFormPage = document.getElementById('prevFormPage');
        const nextFormPage = document.getElementById('nextFormPage');
        const pages = document.querySelectorAll('.page');
        const userFormBtn = document.getElementById('userFormBtn');
        let currentPage = 0;
    
        function updatePageVisibility() {
            pages.forEach((page, index) => {
                if (index === currentPage) {
                    page.classList.add('active');
                } else {
                    page.classList.remove('active');
                }
            });
        
            prevFormPage.classList.toggle('disabled', currentPage === 0);
            nextFormPage.classList.toggle('disabled', currentPage === pages.length - 1);
        
            if (currentPage === pages.length - 1) {
                userFormBtn.style.opacity = 1;
                userFormBtn.style.pointerEvents = 'all';
            } else {
                userFormBtn.style.opacity = 0;
                userFormBtn.style.pointerEvents = 'none';
            }
        }
    
        prevFormPage.addEventListener('click', () => {
            if (currentPage > 0) {
                currentPage--;
                updatePageVisibility();
            }
        });
    
        nextFormPage.addEventListener('click', () => {
            if (currentPage < pages.length - 1) {
                currentPage++;
                updatePageVisibility();
            }
        });
    
        userFormBtn.addEventListener('click', event => {
            let hasError = false;
            let firstErrorPage = null;
    
            pages.forEach((page, index) => {
                const inputs = page.querySelectorAll('#userForm .page .field > *:where(select, input:not([type="checkbox"]))');
                let pageHasError = false;
    
                inputs.forEach(input => {
                    if (!input.checkValidity()) {
                        input.classList.add('show-error');
                        pageHasError = true;
                    } else {
                        input.classList.remove('show-error');
                    }
                });
    
                if (pageHasError && firstErrorPage === null) {
                    firstErrorPage = index;
                    hasError = true;
                }
            });
    
            if (hasError) {
                event.preventDefault();
                currentPage = firstErrorPage;
                updatePageVisibility();
            }
        });
    
        updatePageVisibility();
    </script>
    


    <%
        let bookedDate = [];
        for(const data of noleggi){
            bookedDate.push(`${data.fromDate}:${data.toDate}`) 
        }
    %>
    <div id="bookings" style="display:none;"><%=bookedDate%></div>
    <script>
        const bookings = document.getElementById('bookings').innerText.split(',');
        const currentDate = document.querySelector('.current-date'),
        daysTag = document.querySelector('.days'),
        prevNextIcons = document.querySelectorAll('.calendarIcons span')

        let date = new Date(),
        today = new Date();
        currYear = date.getFullYear(),
        realYear = date.getFullYear(),
        currMonth = date.getMonth(),
        realMonth = date.getMonth();

        const months = ['gennaio', 'febbrario', 'marzo', 'aprile', 'maggio', 'giugno', 'luglio', 'agosto', 'settembre', 'ottobre', 'novembre', 'dicembre'];

        const renderCalendar = () => {
            let firstDateOfMonth = new Date(currYear, currMonth, 0).getDay(),
            lastDateOfMonth = new Date(currYear, currMonth +1, 0).getDate(),
            lastDateOfLastMonth = new Date(currYear, currMonth, 0).getDate();
            let liTag = '';
            for (let i = firstDateOfMonth; i > 0; i--) {
                let isBooked = false
                const day = String(lastDateOfLastMonth-i+1).padStart(2, '0');
                const month = currMonth == 0 ? 12 : String(currMonth).padStart(2, '0');
                const year = currMonth == 0 ? currYear-1 : currYear;
                const data = `${year}-${month}-${day}`;
                let isExpired = today >= new Date(data) ? 'expired': '';
                bookings.forEach(date => {
                    const [fromDate, toDate] = date.split(':');
                    if(new Date(fromDate) <= new Date(data) && new Date(toDate) >= new Date(data)) isBooked = true;
                });
                let isInRange, isToDate, isFromDate;
                if(fromDate && toDate){
                    isInRange = new Date(fromDate) <= new Date(data) && new Date(toDate) >= new Date(data);
                }
                if(fromDate) isFromDate = fromDate == data;
                if(toDate) isToDate = toDate == data;
                
                liTag += `<li class="inactive ${isExpired} ${isBooked ? 'booked' : ''} ${isInRange || isFromDate || isToDate ? 'selected' : ''}" data-day="${data}">${lastDateOfLastMonth-i+1}</li>`;
            }
            
            for (let i = 1; i <= lastDateOfMonth; i++) {
                let isBooked = false

                const day = String(i).padStart(2, '0');
                const month = String(currMonth+1).padStart(2, '0');
                const year = currYear;
                const data = `${year}-${month}-${day}`;
                let isExpired = today >= new Date(data) ? 'expired': '';
                bookings.forEach(date => {
                    const [fromDate, toDate] = date.split(':');
                    if(new Date(fromDate) <= new Date(data) && new Date(toDate) >= new Date(data)) isBooked = true;
                });
                let isInRange, isToDate, isFromDate;
                if(fromDate && toDate){
                    isInRange = new Date(fromDate) <= new Date(data) && new Date(toDate) >= new Date(data);
                }
                if(fromDate) isFromDate = fromDate == data;
                if(toDate) isToDate = toDate == data;
                liTag += `<li class="${isExpired} ${isBooked ? 'booked' : ''} ${isInRange || isFromDate || isToDate ? 'selected' : ''}" data-day="${data}">${i}</li>`;
            }
            const totalRows = Math.ceil((firstDateOfMonth + lastDateOfMonth)/7);
            const missingDaysOfNextMonth = totalRows*7 - (firstDateOfMonth + lastDateOfMonth);
            for (let i = 1; i <= missingDaysOfNextMonth; i++) {
                let isBooked = false

                const day = String(i).padStart(2, '0');
                const month = currMonth == 11 ? 1 : String(currMonth+2).padStart(2, '0');
                const year = currMonth == 11 ? currYear+1 : currYear;
                const data = `${year}-${month}-${day}`;
                bookings.forEach(date => {
                    const [fromDate, toDate] = date.split(':');
                    if(new Date(fromDate) <= new Date(data) && new Date(toDate) >= new Date(data)) isBooked = true;
                });
                let isInRange, isToDate, isFromDate;
                if(fromDate && toDate){
                    isInRange = new Date(fromDate) <= new Date(data) && new Date(toDate) >= new Date(data);
                }
                if(fromDate) isFromDate = fromDate == data;
                if(toDate) isToDate = toDate == data;
                liTag += `<li class="inactive ${isBooked ? 'booked' : ''} ${isInRange || isFromDate || isToDate ? 'selected' : ''}" data-day="${data}">${i}</li>`;
            }
            currentDate.innerText = `${months[currMonth]} ${currYear}`;
            daysTag.innerHTML = liTag;
            listenerDay();
        }
        renderCalendar();
        const prevIcon = document.getElementById('prev');
        for(const icon of prevNextIcons){
            icon.addEventListener('click', () =>{
                currMonth = icon.id == 'prev' ? currMonth - 1 : currMonth + 1;
                
                if(currMonth < 0 || currMonth > 11){
                    date = new Date(currYear, currMonth);
                    currYear = date.getFullYear();
                    currMonth = date.getMonth();
                    
                }else{
                    date = new Date();
                    if(currMonth <= realMonth && currYear == realYear){
                        prevIcon.style.display = 'none';
                    }else{
                        prevIcon.style.display = '';
                    }
                }
                renderCalendar();
            });
        }

        const priceElements = document.querySelectorAll('.price')
        let prices = [];
        priceElements.forEach( el => prices.push(el.dataset.price - 0));

        var fromDate, toDate, fromDateElement, toDateElement;

        function listenerDay() {
            const days = document.querySelectorAll('.days *');
        
            for (const day of days) {
                const today = new Date();
                if(new Date(day.dataset.day) <= today){
                    if(day.classList.contains('booked')){
                        day.classList.remove('booked')
                    }
                    continue;
                }
                if(day.classList.contains('booked')){
                    continue;
                }
                day.addEventListener('click', () => {
                    if(toDate && fromDate){
                        days.forEach(d => d.classList.remove('selected'));
                        fromDate = '';
                        toDate = '';
                        fromDateElement = '';
                        toDateElement = '';
                        document.getElementById('preventivoElement').innerText = '';
                        document.getElementById('userForm').style.display = 'none';
                    }
                    if(!fromDate){
                        day.classList.add(`selected`)
                        fromDate = day.dataset.day;
                        fromDateElement = day
                        return;
                    }
                    if(new Date(day.dataset.day) < new Date(fromDate)) return;
                    day.classList.add(`selected`)
                    toDate = day.dataset.day;
                    toDateElement = day;
                    const fromDateObj = new Date(fromDate);
                    const toDateObj = new Date(toDate);

                    let prevDay;

                    for(const d of days){

                        const currentDay = new Date(d.dataset.day);
                        const isInRange = currentDay >= fromDateObj && currentDay <= toDateObj;

                        if (isInRange && d.classList.contains('booked')) {
                            toDateElement.classList.remove('selected')
                            toDate = prevDay;
                            alert(`Ci spiace il mezzo non è disponibile nella data del ${d.dataset.day.split('-').reverse().join('/')} perciò il noleggio terminerà il ${toDate.split('-').reverse().join('/')}`)
                            break;
                        }
                        if (isInRange) {
                            d.classList.add('selected');
                        }
                        prevDay = d.dataset.day;
                    }
                    let startDay = new Date(fromDate).getDay() - 1;
                    startDay = startDay < 0 ? 6 : startDay;
                    
                    let totalDays = Math.floor((new Date(toDate) - new Date(fromDate)) / (1000 * 60 *60 *24)) + 1;
                    
                    const finalPrice = Array.from({ length: totalDays }, () => prices[startDay++ % 7]).reduce((a, b) => a + b, 0)
                    document.getElementById('preventivoElement').innerText =`Il prezzo del noleggio partirà da ${finalPrice} € + IVA`;
                    document.getElementById('userForm').style.display = 'block';
                    document.getElementById('userForm').scrollIntoView({ behavior: 'smooth' })
                    document.querySelector('[name="fromDate"]').value = fromDate;
                    document.querySelector('[name="toDate"]').value = toDate;
                })
            }
        }
        
        
    </script>



<script>
    document.addEventListener('DOMContentLoaded', () => {
        const userForm = document.getElementById('userForm');
        const fileUploadForm = document.getElementById('fileUploadForm');

        userForm.addEventListener('submit', async (event) => {
            event.preventDefault();

            const formData = new FormData(userForm);
            const newFormData = {}
            formData.forEach((value, key) => (newFormData[key] = value));
            try {
                const response = await fetch('/user/newRent', {
                    method: 'POST',
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify(newFormData)
                });

                if (!response.ok) {
                    throw new Error('Error creating user');
                }

                const data = await response.json();
                const userId = data.userId;

                const fileData = new FormData();
                fileData.append('userId', userId);
                const licenseFrontFile = document.getElementById('licenseFront').files[0];
                const licenseBackFile = document.getElementById('licenseBack').files[0];
                if (licenseFrontFile) {
                    fileData.append('licenseFront', licenseFrontFile);
                }
                if (licenseBackFile) {
                    fileData.append('licenseBack', licenseBackFile);
                }
                const fileResponse = await fetch('/user/uploadFiles', {
                    method: 'POST',
                    body: fileData
                });
                if (!fileResponse.ok) {
                    throw new Error('Error uploading files');
                }
                const fileDataResponse = await fileResponse.json();
                console.log('File caricati con successo:', fileDataResponse);
            } catch (error) {
                console.error('Errore:', error);
            }
        });
    });
</script>




    <article id="loginModal">
        <section>
            <div class="formsContainer" style="--pages: 2;">
                <form class="authForm" id="loginForm" style="--page: 0;">
                    <input type="email" name="email" id="emailLogin" required>
                    <input type="password" name="password" id="passwordLogin" required>
                    <button type="submit">
                        Accedi
                    </button>
                </form>
                <form class="authForm" id="loginOtpForm" style="--page: 1;">
                    <input type="hidden" name="id">
                    <input type="number" id="digit1" name="digit1" min="0" max="9" maxlength="1" required autofocus>
                    <input type="number" id="digit2" name="digit2" min="0" max="9" maxlength="1" required>
                    <input type="number" id="digit3" name="digit3" min="0" max="9" maxlength="1" required>
                    <input type="number" id="digit4" name="digit4" min="0" max="9" maxlength="1" required>
                    <input type="number" id="digit5" name="digit5" min="0" max="9" maxlength="1" required>
                    <input type="number" id="digit6" name="digit6" min="0" max="9" maxlength="1" required>
                </form>
            </div>
        </section>
    </article>
    <script>
        const loginBtn = document.getElementById('login');
        const loginModal = document.getElementById('loginModal');
        loginBtn.addEventListener('click', () => {
            loginModal.classList.add('active');
        });
        const loginForm = document.getElementById('loginForm');
        const loginInputs = document.querySelectorAll('#loginForm input');
        const loginOtpForm = document.getElementById('loginOtpForm');
        loginForm.addEventListener('submit', async (event) => {
                event.preventDefault();
    
                const formData = new FormData(loginForm);

                const newFormData = {}
                formData.forEach((value, key) => (newFormData[key] = value));
                try {
                    const response = await fetch('/user/login', {
                        method: 'POST',
                        headers: {
                        "Content-Type": "application/json",
                        },
                        body: JSON.stringify(newFormData)
                    });
    
                    if (response.ok) {
                        const dati = await response.json();
                        const id = dati.id;
                        loginOtpForm.querySelector('input[name="id"]').value = id;
                        loginOtpForm.classList.add('active');
                        for(const input of loginInputs){
                            input.value = '';
                        }
                        loginOtpForm.focus();
                    } else {
                        const error = await response.json();
                        if (response.status == 401) {
                            if(error.accountExist === false){
                                console.log('Account non esistente')
                            }
                            if(error.wrongCredentials){
                                console.log('Credenziali errate')
                            }
                        }
                        
                        
                        // for(const input of loginInputs){
                        //     input.classList.add = 'invalidLoginField';
                        // }
                    }
                } catch (error) {
                    console.error('Error during login:', error);
                }
            });

            const otpInputs = loginOtpForm.querySelectorAll('input[type="number"]');

            const previousOTPValues = Array.from(otpInputs).map(input => input.value);

            async function checkAllFilled() {
                const allFilled = Array.from(otpInputs).every(input => input.value.length > 0);
                const currentIndex = Array.from(otpInputs).indexOf(document.activeElement);
            
                
                if (allFilled && otpInputs[currentIndex].value !== previousOTPValues[currentIndex]) {
                    previousOTPValues[currentIndex] = otpInputs[currentIndex].value;
                    
                    const formData = new FormData(loginOtpForm);

                    const newFormData = {}
                    formData.forEach((value, key) => (newFormData[key] = value));
                    console.log(newFormData)
                    try {
                        const response = await fetch('/user/otp', {
                            method: 'POST',
                            headers: {
                            "Content-Type": "application/json",
                            },
                            body: JSON.stringify(newFormData)
                        });
                    
                        if (response.ok) {
                            const dati = await response.json();
                            const { token, maxAge } = dati;
                            document.cookie = `userToken=${token}; path=/; max-age=${maxAge}`;

                            for(const input of otpInputs){
                                input.value = '';
                            }
                            loginModal.classList.remove('active');
                        } else {
                            const error = await response.json();
                            if (response.status == 401) {

                                if(error.otpMatched === false){
                                    console.log('codice OTP errato')
                                }
                            }else{
                                console.log('errore generale');
                            }
                        }
                    } catch (error) {
                        console.error('Error during login:', error);
                    }
                }
            }

            otpInputs.forEach(input => {
                input.addEventListener('input', () => {
                    checkAllFilled();
                    const index = Array.from(otpInputs).indexOf(input);
                    previousOTPValues[index] = input.value;
                });
            });
    </script>


<script src="/scripts/utils/auth/otp.js"></script>
</body>
</html>
