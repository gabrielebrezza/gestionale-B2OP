<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= mezzo.marca %> <%= mezzo.modello %></title>
    <link rel="stylesheet" href="/styles.css">
    <style>
        @import url("https://fonts.googleapis.com/css2?family=Reddit+Mono:wght@200..900&display=swap");
        @import url('https://fonts.googleapis.com/css2?family=Reddit+Mono:wght@200..900&family=Rubik:ital,wght@0,300..900;1,300..900&display=swap');
        *{
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: "Rubik", sans-serif;
            font-optical-sizing: auto;
            font-style: normal;
        }
        body {
            background-color: #f4f4f4;
            color: #333;
        }
        .container {
            max-width: 900px;
            margin: 50px auto;
            padding: 20px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
        }
        .mezzo-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        .mezzo-header h1 {
            margin: 0;
            font-size: 2.5em;
        }
        .mezzo-details {
            display: flex;
            justify-content: space-between;
            gap: 20px;
        }
        .mezzo-info {
            flex: 1;
        }
        .mezzo-info p {
            font-size: 1.1em;
            line-height: 1.6em;
        }
        .mezzo-pricing {
            flex: 1;
            background: #f9f9f9;
            padding: 20px;
            border-radius: 8px;
        }
        .mezzo-pricing h3 {
            margin-top: 0;
            font-size: 1.5em;
            color: #555;
        }
        .mezzo-pricing ul {
            list-style: none;
        }
        .mezzo-pricing p {
            font-size: 1.2em;
        }
        .calendar-box {
            margin-top: 30px;
            padding: 20px;
            background: #eef;
            border-radius: 8px;
            text-align: center;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-direction: column;
        }
        .calendar-box p {
            font-size: 1.2em;
            color: #333;
        }


        .calendarWrapper{
    max-width: 450px;
    width: 100%;
    border-radius: 10px;
    font-family: 'Poppins', 'sans-serif';
}
.calendarWrapper .calendarHead{
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 25px 30px 10px;
}
.calendarHead .current-date{
    text-transform: capitalize;
    font-size: 1.45rem;
    font-weight: 500;
}
.calendarHead .calendarIcons span{
    height: 38px;
    width: 38px;
    margin: 0 1px;
    text-align: center;
    line-height: 38px;
    border-radius: 50%;
    cursor: pointer;
    color: #878787;
    font-size: 1.9rem;
    user-select: none;
    transition: .4s ease-in-out;
}
.calendarHead .calendarIcons span:hover{
    background: #7e4cce;
    color: #cccbcb;
}
.calendarHead .calendarIcons span:first-child:hover{
    transform: translateX(-3px);
}
.calendarHead .calendarIcons span:last-child:hover{
    transform: translateX(3px);
}
.calendarMain{
    padding: 20px;
}
.calendarMain ul{
    display: flex;
    list-style: none;
    flex-wrap: wrap;
    text-align: center;
}
.calendarMain .days{
    margin-bottom: 20px;
    z-index: -1;
}
.calendarMain .weeks li{
    font-weight: 500;
}
.calendarMain ul li{
    position: relative;
    width: calc( 100% / 7);
}
.calendarMain .days li{
    cursor: pointer;
    margin-top: 30px;
    z-index: 0;
    transition: color .5s;
}
.days li.inactive{
    color: #aaa;
}
.days li.expired{
    color: #aaa;
    cursor: auto;
    pointer-events: none;
    background: none;
}
.days li{
    user-select: none;
}
.days li.active{
    color: #fff;
}
.calendarMain .days li::before{
    position: absolute;
    content: '';
    border-radius: 50%;
    height: 40px;
    width: 40px;
    top: 50%;
    left: 50%;
    z-index: -1;
    transform: translateX(-50%) translateY(-50%);
    transition: background .3s;
}

.days li:hover::before{
    background: #af95db;
}
.days li:hover{
    color: #f2f2f2;
}
.days li.active::before{
    background: rgb(26, 204, 26);
}
.days li.booked{
    cursor: auto;
    pointer-events: none;
}
.days li.booked::before{
    background: #7B0828;
}
.days li.booked.inactive::before{
    background: #7B0828;
    opacity: .6;
}
.days li.booked:not(.inactive){
    color: #f2f2f2;
}

.days li.selected::before{
    background: #7e4cce;
}
.days li.selected{
    color: #f2f2f2;
}


#userForm{
    flex-direction: column;
    max-width: 450px;
    width: 100%;
    border-radius: 10px;
    font-family: 'Poppins', 'sans-serif';
    overflow-x: hidden;
}
#userForm .pagesContainer{
    width: 300%;
    display: flex;
    justify-content: space-between;
    overflow-x: hidden;
}
#userForm .page{
    width: 450px !important;
    padding: 15px;
    margin: 10px;
    transition: transform .25s, opacity .25s;
}
#userForm .page .field{
    display: flex;
    justify-content: space-between;
    margin-block: 10px;
}
#userForm .page .field > *:where(select, input){
    max-width: 150px;
    width: 100%;
    padding: 5px;
    background: none;
    outline: none;
    border: none;
    border-bottom: 1px solid #333;
}
#userFormBtn{
    opacity: 0;
    outline: none;
    border: none;
    padding: 10px 20px;
    background: #7e4cce;
    color: #f2f2f2;
    cursor: pointer;
    transition: opacity .5s;
}
.formIconContainer span{
    cursor: pointer;
}
#userForm .buttonContainer{
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: 10px;
}
    </style>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0" />

</head>
<body>
    <div class="container">
        <div class="mezzo-header">
            <h1><%= mezzo.marca %> <%= mezzo.modello %></h1>
        </div>
        
        <div class="mezzo-details">
            <div class="mezzo-info">
                <h2>Descrizione</h2>
                <p><%= mezzo.descrizione %></p>
            </div>
            <div class="mezzo-pricing">
                <h3>Prezzi e Dettagli</h3>
                <p>Chilometri inclusi: <%= mezzo.kmIncluded %> km</p>
                <p>Costo per chilometro extra: €<%= mezzo.kmPrice %></p>
                <h4>Tariffe giornaliere:</h4>
                <ul>
                    <% const weekDays = ['lunedì', 'martedì', 'mercoledì', 'giovedì', 'venerdì', 'sabato', 'domenica'] %>
                    <% for (let [days, price] of Object.entries(mezzo.daysPrices)) { %>
                        <li class="price" data-price="<%= price %>"><%= weekDays[days] %>: <s><%= mezzo.discountedDays.includes(days) ? `${price + (price * mezzo.discount)/100} €` : '' %></s> <%= price %> € </li>
                    <% } %>
                </ul>
            </div>
        </div>
        
        <div class="calendar-box">
            <p>Selezionare data di inizio e di fine noleggio:</p>
            
            <div class="calendarWrapper">
                <div class="calendarHead">
                    <p class="current-date"></p>
                    <div class="calendarIcons">
                        <span id="prev" class="material-symbols-outlined" style="display: none;">
                            chevron_left
                        </span>
                        <span id="next" class="material-symbols-outlined">
                            chevron_right
                        </span>
                    </div>
                </div>
                <div class="calendarMain">
                    <ul class="weeks">
                        <li>Lun</li>
                        <li>Mar</li>
                        <li>Mer</li>
                        <li>Gio</li>
                        <li>Ven</li>
                        <li>Sab</li>
                        <li>Dom</li>
                    </ul>
                    <ul class="days">
                    </ul>
                </div>
            </div>
            <p id="preventivoElement"></p>

            <form id="userForm" action="/admin/mezzi/newRent" method="POST">
                <% if (!isLoggedIn) { %>
                    <p>Per semplificare il checkout in futuro <a href="#">Crea un Account</a> o se lo hai già <a href="#">Accedi</a></p>
                <% } %>
                <input type="hidden" name="id" value="<%= mezzo._id %>">
                <input type="hidden" name="fromDate">
                <input type="hidden" name="toDate">
                <div class="pagesContainer">
                    <section class="page page1">
                        <div class="field">
                            <label for="newUserName">Nome:</label>
                            <input type="text" name="nome">
                        </div>
                        <div class="field">
                            <label for="newUserSurname">Cognome:</label>
                            <input type="text" name="cognome">
                        </div>
                        <div class="field">
                            <label for="newUserCf">Codice Fiscale:</label>
                            <input type="text" name="cf">
                        </div>
                        <div class="field">
                            <label for="newUserCUnivoco">Codice Univoco:</label>
                            <input type="text" name="cUnivoco">
                        </div>
                        <div class="field">
                            <label for="newUserPIVA">Partita IVA:</label>
                            <input type="text" name="pIva">
                        </div>
                    </section>
                    <section class="page page2" style="display: none;">
                        <div class="field">
                            <label for="newUserVia">Via:</label>
                            <input type="text" name="residenza[via]">
                        </div>
                        <div class="field">
                            <label for="newUserCivico">Civico:</label>
                            <input type="text" name="residenza[nCivico]">
                        </div>
                        <div class="field">
                            <label for="newUserCap">CAP:</label>
                            <input type="text" name="residenza[cap]">
                        </div>
                        <div class="field">
                            <label for="newUserComune">Comune:</label>
                            <input type="text" name="residenza[comune]">
                        </div>
                        <div class="field">
                            <label for="newUserProvincia">Provincia:</label>
                            <input type="text" name="residenza[provincia]">
                        </div>
                        <div class="field">
                            <label for="newUserEmail">Email:</label>
                            <input type="text" name="contatti[email]">
                        </div>
                        <div class="field">
                            <label for="newUserTel">Tel:</label>
                            <input type="text" name="contatti[tel]">
                        </div>
                        <div class="field">
                            <label for="newUserPec">Pec:</label>
                            <input type="text" name="contatti[pec]">
                        </div>
                    </section>
                    <section class="page page3" style="display: none;">
                        <div class="field">
                            <label for="newUsernPatente">Numero Patente:</label>
                            <input type="text" name="patente[numero]">
                        </div>
                        <div class="field">
                            <label for="newUserRilascioPat">Rilascio Patente:</label>
                            <input type="date" name="patente[rilascio]">
                        </div>
                        <div class="field">
                            <label for="newUserOfficePat">Rilasciata Da:</label>
                            <input type="text" name="patente[daUfficio]">
                        </div>
                        <div class="field">
                            <label for="newUserExpPat">Scadenza:</label>
                            <input type="date" name="patente[scadenza]">
                        </div>
                    </section>
                </div>
                
                <div class="buttonContainer">
                    <button id="userFormBtn" type="submit" style="display: none;">Salva</button>
                    <div class="formIconContainer">
                        <span id="prevFormPage" class="material-symbols-outlined disabled">
                            chevron_left
                        </span>
                        <span id="nextFormPage" class="material-symbols-outlined">
                            chevron_right
                        </span>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <script>
        const prevFormPage = document.getElementById('prevFormPage');
            const nextFormPage = document.getElementById('nextFormPage');
            const page1 = document.querySelector('.page1');
            const page2 = document.querySelector('.page2');
            const page3 = document.querySelector('.page3');
            const userFormBtn = document.getElementById('userFormBtn');
            prevFormPage.addEventListener('click', () => {
                if(page1.style.display != 'none') return;
                if(page2.style.display == 'none') {
                    page2.style.display = 'block';
                    page3.style.transform = 'translateX(-350%)';
                    userFormBtn.style.opacity = 0;
                    page3.style.opacity = 0;
                    page2.style.transform = 'translateX(-100%)';
                    page2.style.opacity = 1;
                    setTimeout(() => {
                        page2.style.transform = 'translateX(+0%)';
                        page3.style.display = 'none';
                        userFormBtn.style.display = 'none';
                    }, 250);
                    nextFormPage.classList.remove('disabled');
                    return;
                }
                if(page1.style.display == 'none'){
                    page1.style.display = 'block';
                    page2.style.transform = 'translateX(-350%)';
                    page2.style.opacity = 0;
                    page1.style.transform = 'translateX(-100%)';
                    page1.style.opacity = 1;
                    setTimeout(() => {
                        page1.style.transform = 'translateX(+0%)';
                        page2.style.display = 'none';
                    }, 250);
                    prevFormPage.classList.add('disabled');
                    return;
                }
            });
            nextFormPage.addEventListener('click', () => {
                if(page3.style.display != 'none') return;
                if(page2.style.display == 'none') {
                    page2.style.display = 'block';
                    page2.style.opacity = 1;
                    page1.style.transform = 'translateX(-50%)';
                    page1.style.opacity = 0;
                    page2.style.transform = 'translateX(-50%)';
                    setTimeout(() => {
                        page1.style.display = 'none';
                        page2.style.transform = 'translateX(0%)';
                    }, 250);
                    prevFormPage.classList.remove('disabled');
                    return;
                }
                if(page3.style.display == 'none') {
                    page3.style.display = 'block';
                    userFormBtn.style.display = 'block';
                    userFormBtn.style.opacity = 1;
                    page3.style.opacity = 1;
                    page2.style.transform = 'translateX(-50%)';
                    page2.style.opacity = 0;
                    page3.style.transform = 'translateX(-50%)';
                    setTimeout(() => {
                        page2.style.display = 'none';
                        page3.style.transform = 'translateX(0%)';
                    }, 250);
                    nextFormPage.classList.add('disabled');
                    return;
                }
            });
    </script>

    <%
        let bookedDate = [];
        for(const data of noleggi){
            bookedDate.push(`${data.fromDate}:${data.toDate}`) 
        }
    %>
    <div id="bookings" style="display:none;"><%=bookedDate%></div>
    <script>
        const bookings = document.getElementById('bookings').innerText.split(',');
        const currentDate = document.querySelector('.current-date'),
        daysTag = document.querySelector('.days'),
        prevNextIcons = document.querySelectorAll('.calendarIcons span')

        let date = new Date(),
        today = new Date();
        currYear = date.getFullYear(),
        realYear = date.getFullYear(),
        currMonth = date.getMonth(),
        realMonth = date.getMonth();

        const months = ['gennaio', 'febbrario', 'marzo', 'aprile', 'maggio', 'giugno', 'luglio', 'agosto', 'settembre', 'ottobre', 'novembre', 'dicembre'];

        const renderCalendar = () => {
            let firstDateOfMonth = new Date(currYear, currMonth, 0).getDay(),
            lastDateOfMonth = new Date(currYear, currMonth +1, 0).getDate(),
            lastDateOfLastMonth = new Date(currYear, currMonth, 0).getDate();
            let liTag = '';
            for (let i = firstDateOfMonth; i > 0; i--) {
                let isBooked = false
                const day = String(lastDateOfLastMonth-i+1).padStart(2, '0');
                const month = currMonth == 0 ? 12 : String(currMonth).padStart(2, '0');
                const year = currMonth == 0 ? currYear-1 : currYear;
                const data = `${year}-${month}-${day}`;
                let isExpired = today >= new Date(data) ? 'expired': '';
                bookings.forEach(date => {
                    const [fromDate, toDate] = date.split(':');
                    if(new Date(fromDate) <= new Date(data) && new Date(toDate) >= new Date(data)) isBooked = true;
                });
                let isInRange, isToDate, isFromDate;
                if(fromDate && toDate){
                    isInRange = new Date(fromDate) <= new Date(data) && new Date(toDate) >= new Date(data);
                }
                if(fromDate) isFromDate = fromDate == data;
                if(toDate) isToDate = toDate == data;
                
                liTag += `<li class="inactive ${isExpired} ${isBooked ? 'booked' : ''} ${isInRange || isFromDate || isToDate ? 'selected' : ''}" data-day="${data}">${lastDateOfLastMonth-i+1}</li>`;
            }
            
            for (let i = 1; i <= lastDateOfMonth; i++) {
                let isBooked = false

                const day = String(i).padStart(2, '0');
                const month = String(currMonth+1).padStart(2, '0');
                const year = currYear;
                const data = `${year}-${month}-${day}`;
                let isExpired = today >= new Date(data) ? 'expired': '';
                bookings.forEach(date => {
                    const [fromDate, toDate] = date.split(':');
                    if(new Date(fromDate) <= new Date(data) && new Date(toDate) >= new Date(data)) isBooked = true;
                });
                let isInRange, isToDate, isFromDate;
                if(fromDate && toDate){
                    isInRange = new Date(fromDate) <= new Date(data) && new Date(toDate) >= new Date(data);
                }
                if(fromDate) isFromDate = fromDate == data;
                if(toDate) isToDate = toDate == data;
                liTag += `<li class="${isExpired} ${isBooked ? 'booked' : ''} ${isInRange || isFromDate || isToDate ? 'selected' : ''}" data-day="${data}">${i}</li>`;
            }
            const totalRows = Math.ceil((firstDateOfMonth + lastDateOfMonth)/7);
            const missingDaysOfNextMonth = totalRows*7 - (firstDateOfMonth + lastDateOfMonth);
            for (let i = 1; i <= missingDaysOfNextMonth; i++) {
                let isBooked = false

                const day = String(i).padStart(2, '0');
                const month = currMonth == 11 ? 1 : String(currMonth+2).padStart(2, '0');
                const year = currMonth == 11 ? currYear+1 : currYear;
                const data = `${year}-${month}-${day}`;
                bookings.forEach(date => {
                    const [fromDate, toDate] = date.split(':');
                    if(new Date(fromDate) <= new Date(data) && new Date(toDate) >= new Date(data)) isBooked = true;
                });
                let isInRange, isToDate, isFromDate;
                if(fromDate && toDate){
                    isInRange = new Date(fromDate) <= new Date(data) && new Date(toDate) >= new Date(data);
                }
                if(fromDate) isFromDate = fromDate == data;
                if(toDate) isToDate = toDate == data;
                liTag += `<li class="inactive ${isBooked ? 'booked' : ''} ${isInRange || isFromDate || isToDate ? 'selected' : ''}" data-day="${data}">${i}</li>`;
            }
            currentDate.innerText = `${months[currMonth]} ${currYear}`;
            daysTag.innerHTML = liTag;
            listenerDay();
        }
        renderCalendar();
        const prevIcon = document.getElementById('prev');
        for(const icon of prevNextIcons){
            icon.addEventListener('click', () =>{
                currMonth = icon.id == 'prev' ? currMonth - 1 : currMonth + 1;
                
                if(currMonth < 0 || currMonth > 11){
                    date = new Date(currYear, currMonth);
                    currYear = date.getFullYear();
                    currMonth = date.getMonth();
                    
                }else{
                    date = new Date();
                    if(currMonth <= realMonth && currYear == realYear){
                        prevIcon.style.display = 'none';
                    }else{
                        prevIcon.style.display = '';
                    }
                }
                renderCalendar();
            });
        }

        const priceElements = document.querySelectorAll('.price')
        let prices = [];
        priceElements.forEach( el => prices.push(el.dataset.price - 0));

        var fromDate, toDate, fromDateElement, toDateElement;

        function listenerDay() {
            const days = document.querySelectorAll('.days *');
        
            for (const day of days) {
                const today = new Date();
                if(new Date(day.dataset.day) <= today){
                    if(day.classList.contains('booked')){
                        day.classList.remove('booked')
                    }
                    continue;
                }
                if(day.classList.contains('booked')){
                    continue;
                }
                day.addEventListener('click', () => {
                    if(toDate && fromDate){
                        days.forEach(d => d.classList.remove('selected'));
                        fromDate = '';
                        toDate = '';
                        fromDateElement = '';
                        toDateElement = '';
                        document.getElementById('preventivoElement').innerText = '';
                        document.getElementById('userForm').style.display = 'none';
                    }
                    if(!fromDate){
                        day.classList.add(`selected`)
                        fromDate = day.dataset.day;
                        fromDateElement = day
                        return;
                    }
                    if(new Date(day.dataset.day) < new Date(fromDate)) return;
                    day.classList.add(`selected`)
                    toDate = day.dataset.day;
                    toDateElement = day;
                    const fromDateObj = new Date(fromDate);
                    const toDateObj = new Date(toDate);

                    let prevDay;

                    for(const d of days){

                        const currentDay = new Date(d.dataset.day);
                        const isInRange = currentDay >= fromDateObj && currentDay <= toDateObj;

                        if (isInRange && d.classList.contains('booked')) {
                            toDateElement.classList.remove('selected')
                            toDate = prevDay;
                            alert(`Ci spiace il mezzo non è disponibile nella data del ${d.dataset.day.split('-').reverse().join('/')} perciò il noleggio terminerà il ${toDate.split('-').reverse().join('/')}`)
                            break;
                        }
                        if (isInRange) {
                            d.classList.add('selected');
                        }
                        prevDay = d.dataset.day;
                    }
                    let startDay = new Date(fromDate).getDay() - 1;
                    startDay = startDay < 0 ? 6 : startDay;
                    
                    let totalDays = Math.floor((new Date(toDate) - new Date(fromDate)) / (1000 * 60 *60 *24)) + 1;
                    
                    const finalPrice = Array.from({ length: totalDays }, () => prices[startDay++ % 7]).reduce((a, b) => a + b, 0)
                    document.getElementById('preventivoElement').innerText =`Il prezzo del noleggio partirà da ${finalPrice} €`;
                    document.getElementById('userForm').style.display = 'flex';
                    document.querySelector('[name="fromDate"]').value = fromDate;
                    document.querySelector('[name="toDate"]').value = toDate;
                })
            }
        }
        
        
    </script>



</body>
</html>
