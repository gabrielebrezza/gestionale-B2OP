<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= mezzo.marca %> <%= mezzo.modello %></title>
    <link rel="stylesheet" href="/styles.css">
    <style>
        @import url("https://fonts.googleapis.com/css2?family=Reddit+Mono:wght@200..900&display=swap");
        @import url('https://fonts.googleapis.com/css2?family=Reddit+Mono:wght@200..900&family=Rubik:ital,wght@0,300..900;1,300..900&display=swap');
        *{
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: "Rubik", sans-serif;
            font-optical-sizing: auto;
            font-style: normal;
            -webkit-tap-highlight-color: transparent;
            scroll-behavior: smooth;
        }
        body {
            background-color: #f4f4f4;
            color: #333;
        }
        .container {
            max-width: 900px;
            margin: 50px auto;
            padding: 20px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
        }
        .mezzo-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        .mezzo-header h1 {
            margin: 0;
            font-size: 2.5em;
        }
        .mezzo-details {
            display: flex;
            justify-content: space-between;
            gap: 20px;
        }
        .mezzo-info {
            flex: 1;
        }
        .mezzo-info p {
            font-size: 1.1em;
            line-height: 1.6em;
        }
        .mezzo-pricing {
            flex: 1;
            background: #f9f9f9;
            padding: 20px;
            border-radius: 8px;
        }
        .mezzo-pricing h3 {
            margin-top: 0;
            font-size: 1.5em;
            color: #555;
        }
        .mezzo-pricing ul {
            list-style: none;
        }
        .mezzo-pricing p {
            font-size: 1.2em;
        }
        .calendar-box {
            margin-top: 30px;
            padding: 20px;
            background: #eef;
            border-radius: 8px;
            text-align: center;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-direction: column;
        }
        .calendar-box p {
            font-size: 1.2em;
            color: #333;
        }


        .calendarWrapper{
    max-width: 450px;
    width: 100%;
    border-radius: 10px;
    font-family: 'Poppins', 'sans-serif';
}
.calendarWrapper .calendarHead{
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 25px 30px 10px;
}
.calendarHead .current-date{
    text-transform: capitalize;
    font-size: 1.45rem;
    font-weight: 500;
}
.calendarHead .calendarIcons span{
    height: 38px;
    width: 38px;
    margin: 0 1px;
    text-align: center;
    line-height: 38px;
    border-radius: 50%;
    cursor: pointer;
    color: #878787;
    font-size: 1.9rem;
    user-select: none;
    transition: .4s ease-in-out;
}
.calendarHead .calendarIcons span:hover{
    background: #7e4cce;
    color: #cccbcb;
}
.calendarHead .calendarIcons span:first-child:hover{
    transform: translateX(-3px);
}
.calendarHead .calendarIcons span:last-child:hover{
    transform: translateX(3px);
}
.calendarMain{
    padding: 20px;
}
.calendarMain ul{
    display: flex;
    list-style: none;
    flex-wrap: wrap;
    text-align: center;
}
.calendarMain .days{
    margin-bottom: 20px;
    z-index: -1;
}
.calendarMain .weeks li{
    font-weight: 500;
}
.calendarMain ul li{
    position: relative;
    width: calc( 100% / 7);
}
.calendarMain .days li{
    cursor: pointer;
    margin-top: 30px;
    z-index: 0;
    transition: color .5s;
}
.days li.inactive{
    color: #aaa;
}
.days li.expired{
    color: #aaa;
    cursor: auto;
    pointer-events: none;
    background: none;
}
.days li{
    user-select: none;
}
.days li.active{
    color: #fff;
}
.calendarMain .days li::before{
    position: absolute;
    content: '';
    border-radius: 50%;
    height: 40px;
    width: 40px;
    top: 50%;
    left: 50%;
    z-index: -1;
    transform: translateX(-50%) translateY(-50%);
    transition: background .3s;
}

.days li:hover::before{
    background: #af95db;
}
.days li:hover{
    color: #f2f2f2;
}
.days li.active::before{
    background: rgb(26, 204, 26);
}
.days li.booked{
    cursor: auto;
    pointer-events: none;
}
.days li.booked::before{
    background: #7B0828;
}
.days li.booked.inactive::before{
    background: #7B0828;
    opacity: .6;
}
.days li.booked:not(.inactive){
    color: #f2f2f2;
}

.days li.selected::before{
    background: #7e4cce;
}
.days li.selected{
    color: #f2f2f2;
}

#userForm {
    max-width: 450px;
    width: 100%;
    border-radius: 10px;
    font-family: 'Poppins', 'sans-serif';
    overflow: hidden;
    position: relative;
}

#userForm .pagesContainer {
    width: calc(100% * var(--pages));
    height: max-content;
    display: flex;
    align-items: center;
    overflow: hidden;
}

#userForm .page {
    width: 100%;
    height: 360px;
    padding: 15px;
    margin: 0;
    transition: transform 0.35s ease, opacity 0.35s ease;
    opacity: 0;
    transform: translateX(100%);
    z-index: 0;
    display: flex;
    justify-content: center;
    flex-direction: column;
    gap: 8px;
}

#userForm .page.active {
    opacity: 1;
    transform: translateX(calc(var(--page) * -100%));
    z-index: 165;
}

#userForm .page .field{
    display: flex;
    justify-content: space-between;
}
.field:has(input[type="file"]){
    align-items: center;
}
#userForm .page .field:not(.termsField) > *:where(select, input:not([type="checkbox"] [type="file"])){
    max-width: 150px;
    width: 100%;
    padding: 5px;
    background: none;
    outline: none;
    border: none;
    border-bottom: 1px solid #333;
}
.field:not(.termsField) > *:where(select, input:not([type="checkbox"])).show-error:invalid{
    border-bottom: 1px solid red;
}
.field label{
    position: relative;
}
.field label sup{
    position: absolute;
    left: -8px;
    font-size: 1rem;
    color: #7B0828;
}

#userFormBtn{
    opacity: 0;
    pointer-events: none;
    outline: none;
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    margin-block: 25px;
    background: #7e4cce;
    color: #f2f2f2;
    cursor: pointer;
    transition: opacity .25s, transform .25s;
}

#userFormBtn.active{
    opacity: 1 !important;
    pointer-events: all !important;
}

#userFormBtn:hover{
    transform: scaleX(1.2) scaleY(1.1);
}
.formIconContainer{
    margin-block: 10px;
    user-select: none;
    display: flex;
    align-items: center;
    gap: 25px;
    z-index: 2;
}

.formIconContainer .prevNextIcons{
    position: relative;
    opacity: 1;
    pointer-events: all;
    cursor: pointer;
    user-select: none;
    transition: opacity .5s ease-in-out;
    z-index: 1;
    color: #333;
}

.formIconContainer .prevNextIcons::before{
    position: absolute;
    content: '';
    border-radius: 50%;
    height: 40px;
    width: 40px;
    top: 50%;
    left: 50%;
    z-index: 0;
    transform: translateX(-50%) translateY(-50%);
    background: rgb(164, 164, 162);
    opacity: .5;
}

p.loginAlert{
    margin-top: 20px;
    font-size: .8rem;
}
.accountLink{
    color: #7e4cce;
    font-weight: 500;
    cursor: pointer;
}
.formIconContainer span.disabled{
    opacity: 0;
    pointer-events: none;
}
#userForm .buttonContainer{
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: 10px;
}
.field.termsField{
    width: 100%;
    position: absolute;
    bottom: 0;
    left: 0;
    display: flex;
    justify-content: center !important;
    gap: 5px;
    color: #bcb9b9;
}
.field.termsField > input{
    cursor: pointer;
    accent-color: #7e4cce;
}
@media (max-width: 480px){
    .mezzo-details {
        flex-direction: column;
    }


    .calendarWrapper .calendarHead{
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 15px 20px 0px;
    }
    .calendarHead .current-date{
        font-size: 1.25rem;
    }

    .calendarMain .days li::before{
        height: 35px;
        width: 35px;
    }
    .calendarHead .calendarIcons span{
        height: 25px;
        width: 25px;
        line-height: 25px;
        font-size: 1.4rem;
    }
    .calendarMain{
        padding: 10px;
    }
    #preventivoElement, p.loginAlert, .calendar-box > p{
        width: 100%;
        font-size: .5rem;
    }
}

#preventivoElement{
    max-width: 450px;
}


.modal{
position: fixed;
top: 0;
left: 0;
width: 100%;
height: 100%;
display: flex;
align-items: center;
justify-content: center;
opacity: 0;
pointer-events: none;
transition: opacity .5s;
z-index: 1000;
filter: drop-shadow(10px 12px 0px #000);
}
.modal.active{
    opacity: 1;
    pointer-events: all;
}
.modal section{
    max-width: 350px;
    width: 100%;
    background: #f2f2f2;
    border: 1px solid #7e4cce;
    border-radius: 10px;
    position: relative;
    overflow: hidden;
}
.modal section .formsContainer{
    width: calc(100% * var(--pages));
    height: max-content;
    display: flex;
    align-items: center;
    overflow: hidden;
}
.modal section .formsContainer .authForm {
    width: 100%;
    height: 328px;
    transform: translateX(-100%);
    opacity: 0;
    pointer-events: none;
    display: flex;
    justify-content: space-around;
    align-items: center;
    flex-direction: column;
    padding: 15px;
    margin: 0;
    transition: .5s;
}

.modal section .formsContainer .authForm.active{
    opacity: 1;
    pointer-events: all;
    /* transform: translateX(0) !important; */
    transform: translateX(calc(-1 * var(--page) * 100%)) !important;
}



.modal .field{
    position: relative;
    display: flex;
    align-items: center;
    margin-block: 25px;
}
.modal .field input{
    width: 100%;
    padding: 10px;
    margin: 0;
    border: none;
    outline: none;
    border-radius: 0;
    background: #0000 !important;
    border-bottom: 2px solid #7e4cce;
    color: #333;
    font-size: 1rem;
}
.modal .field input::placeholder{
    width: 100%;
    transform: translateX(30px) translateY(2px);
    transition: .5s;
    color: #555;
    opacity: .8;
}
.modal .field:has(input:focus input:-webkit-autofill) input::placeholder{
    transform: translateX(0) translateY(2px);
}
.modal .field span{
    color: #555;
    position: absolute;
    font-size: 1.5rem;
    padding: 10px;
    transition: .5s;
}
.modal .field:has(input:focus, input:not(:placeholder-shown)) span{
    transform: translateX(-30px);
}
.modal button[type="submit"] {
    max-width: 200px;
    width: 100%;
    padding: 12px;
    background: #7e4cce;
    border: none;
    outline: none;
    border-radius: 5px;
    color: #f2f2f2;
    cursor: pointer;
    transition: background-color 0.3s;
    text-transform: uppercase;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 5px;
}
.modal button[type="submit"]:hover {
    background: #8b60d7;
}
.modal button[type="submit"] span{
    transition: .5s;
}
.modal button[type="submit"]:hover span {
    transform: translateX(-10px);
}
#signupModal section{
max-width: 450px;
}
section .closeModal{
    position: absolute;
    right: 15px;
    top: 15px;
    z-index: 2;
    cursor: pointer;
    user-select: none;
    -webkit-user-drag: none;
    font-weight: 900;
    color: #878787;
    transition: .5s ease-in-out;
}
.closeModal:hover{
    color: #7e4cce;
    transform: rotateZ(360deg);
}
#signupForm{
    height: 550px;
    overflow: hidden;
    border-radius: 5px;
}
.signupPagesContainer{
    width: calc(100% * var(--pages));
    height: 550px;
    display: flex;
    justify-content: center;
    position: absolute;
    left: 0;
    bottom: 0;
    border-radius: 5px;
    overflow: hidden;
}
.signupPage{
    transform: translateX(100%);
    width: 100%;
    padding: 20px;
    opacity: 0;
    pointer-events: none;
    transition: opacity .5s, transform .5s;
    border: none !important;
}
.signupPage.active{
    transform: translateX(calc(var(--page) * -100%));
    opacity: 1;
    pointer-events: all;
}
.signupPage h2{
    text-align: center;
    margin-top: 0px;
    font-size: 1.6rem;
}
.signupPage .field{
    display: flex;
    justify-content: space-between;
    align-items: flex-end;
}
.signupPage .field input{
    max-width: 180px;
    font-size: .9rem;
    padding: 2px;
}

.otpForm{
    display: flex;
    justify-content: space-evenly !important;
}
.otpForm p{
    text-align: center;
}
.otpForm .otpField{
    display: flex;
    gap: 5px;
}
.otpForm .otpField input{
    height: 38px;
    width: 38px;
    text-align: center;
    background: none;
    outline: none;
    border: 3px solid #7e4cce;
    border-radius: 5px;
}
input[type="number"]::-webkit-outer-spin-button,
input[type="number"]::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
}
input[type="number"] {
    -moz-appearance: textfield;
}
.custom-file-upload input[type="file"] {
    display: none;
}
#userForm .custom-file-upload {
    padding: 10px 20px;
}
.custom-file-upload {
    display: inline-block;
    position: relative;
    background-color: #7e4cce;
    border-radius: 5px;
    display: flex;
    font-family: 'Poppins', sans-serif;
}

.custom-file-upload  {
    display: flex;
    align-items: center;
    cursor: pointer;
    padding-left: 20px;
}
.custom-file-upload {
    text-align: center;
}
.custom-file-upload label{
    display: flex;
    align-items: center;
    color: #f2f2f2;
    position: relative;
    cursor: pointer;
    
}
.signupPage .custom-file-upload label{
margin-left: 15px;
}
.custom-file-upload label span{
    position: relative !important;
    color: #f2f2f2 !important;
}
.custom-file-upload label span.upload-text{
    font-size: 1rem;
}
#signupForm .formIconContainer{
    display: flex;
    justify-content: center;
}
#signupSubmit{
    width: 0%;
    overflow: hidden;
    opacity: 0;
    transition: .5s;
    pointer-events: none;
}
#signupSubmit.active{
    width: 100%;
    opacity: 1;
    pointer-events: all;
}
input[type="checkbox"]{
    outline: none;
}

.loading{
    background: linear-gradient(to right, #7e4cce, #d4cddf) !important;
    background-size: 500% 500% !important;
    animation: rotateGradient 1.5s linear infinite;
}

@keyframes rotateGradient {
    0% {
        background-position: 0% 0%;
    }
    50% {
        background-position: 50% 50%;
    }
    100% {
        background-position: 0% 0%;
    }
}
    </style>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
</head>
<body>
    <%- include('components/header.ejs') %>
    <main>
    <div class="container">
        <div class="mezzo-header">
            <h1><%= mezzo.marca %> <%= mezzo.modello %></h1>
        </div>
        
        <div class="mezzo-details">
            <div class="mezzo-info">
                <h2>Descrizione</h2>
                <p><%= mezzo.descrizione %></p>
            </div>
            <div class="mezzo-pricing">
                <h3>Prezzi e Dettagli</h3>
                <p>Chilometri inclusi: <%= mezzo.kmIncluded %> km</p>
                <p>Costo per chilometro extra: €<%= mezzo.kmPrice %></p>
                <h4>Tariffe giornaliere:</h4>
                <ul>
                    <% const weekDays = ['lunedì', 'martedì', 'mercoledì', 'giovedì', 'venerdì', 'sabato', 'domenica'] %>
                    <% for (let [days, price] of Object.entries(mezzo.daysPrices)) { %>
                        <li class="price" data-price="<%= price %>"><%= weekDays[days] %>: <s><%= mezzo.discountedDays.includes(days) ? `${price + (price * mezzo.discount)/100} €` : '' %></s> <%= price %> € </li>
                    <% } %>
                </ul>
            </div>
        </div>
        
        <div class="calendar-box">
            <p>Selezionare data di inizio e di fine noleggio:</p>
            
            <div class="calendarWrapper">
                <div class="calendarHead">
                    <p class="current-date"></p>
                    <div class="calendarIcons">
                        <span id="prev" class="material-symbols-outlined" style="display: none;">
                            chevron_left
                        </span>
                        <span id="next" class="material-symbols-outlined">
                            chevron_right
                        </span>
                    </div>
                </div>
                <div class="calendarMain">
                    <ul class="weeks">
                        <li>Lun</li>
                        <li>Mar</li>
                        <li>Mer</li>
                        <li>Gio</li>
                        <li>Ven</li>
                        <li>Sab</li>
                        <li>Dom</li>
                    </ul>
                    <ul class="days">
                    </ul>
                </div>
            </div>
            <p id="preventivoElement" style="display: none;"> <%= mezzo.kmIncluded ? ` con ${mezzo.kmIncluded} km inclusi ` : '' %> <%= mezzo.kmPrice ? ` più ${mezzo.kmPrice.toFixed(2)}€ + IVA ogni km extra` : '' %>.</p>

            <form id="userForm" <%= !customerId ? 'enctype=multipart/form-data' : 'action=/user/newRent method=POST'  %> style="display: none;">
                <input type="hidden" name="mezzoId" value="<%= mezzo._id %>">
                <input type="hidden" name="fromDate">
                <input type="hidden" name="toDate">
                <% if (!customerId) { %>
                    <div class="pagesContainer" style="--pages: 4">
                        <section class="page page1" style="--page: 0">
                            <div class="field">
                                <label title="Campo Obbligatorio"><sup>*</sup>Nome:</label>
                                <input type="text" name="nome" required>
                            </div>
                            <div class="field">
                                <label title="Campo Obbligatorio"><sup>*</sup>Cognome:</label>
                                <input type="text" name="cognome" required>
                            </div>
                            <div class="field">
                                <label title="Campo Obbligatorio"><sup>*</sup>Codice Fiscale:</label>
                                <input type="text" name="cf" required>
                            </div>
                            <div class="field">
                                <label>Codice Univoco:</label>
                                <input type="text" name="cUnivoco">
                            </div>
                            <div class="field">
                                <label>Partita IVA:</label>
                                <input type="text" name="pIva">
                            </div>
                        </section>
                        <section class="page page2" style="--page: 1">
                            <div class="field">
                                <label title="Campo Obbligatorio"><sup>*</sup>Via:</label>
                                <input type="text" name="residenza[via]" required>
                            </div>
                            <div class="field">
                                <label title="Campo Obbligatorio"><sup>*</sup>Civico:</label>
                                <input type="text" name="residenza[nCivico]" required>
                            </div>
                            <div class="field">
                                <label title="Campo Obbligatorio"><sup>*</sup>CAP:</label>
                                <input type="text" name="residenza[cap]" autocomplete="postal-code" required>
                            </div>
                            <div class="field">
                                <label title="Campo Obbligatorio"><sup>*</sup>Comune:</label>
                                <input type="text" name="residenza[comune]" autocomplete="address-level2" required>
                            </div>
                            <div class="field">
                                <label title="Campo Obbligatorio"><sup>*</sup>Provincia:</label>
                                <input type="text" name="residenza[provincia]" autocomplete="address-level1" required>
                            </div>
                            <div class="field">
                                <label title="Campo Obbligatorio"><sup>*</sup>Email:</label>
                                <input type="email" name="contatti[email]" autocomplete="email" required>
                            </div>
                            <div class="field">
                                <label title="Campo Obbligatorio"><sup>*</sup>Tel:</label>
                                <input type="tel" name="contatti[tel]" autocomplete="tel" required>
                            </div>
                            <div class="field">
                                <label >Pec:</label>
                                <input type="text" name="contatti[pec]">
                            </div>
                        </section>
                        <section class="page page3" style="--page: 2">
                            <div class="field">
                                <label title="Campo Obbligatorio"><sup>*</sup>Numero Patente:</label>
                                <input type="text" name="patente[numero]" required>
                            </div>
                            <div class="field">
                                <label>Rilasciata Da:</label>
                                <input type="text" name="patente[daUfficio]">
                            </div>
                            <div class="field">
                                <label title="Campo Obbligatorio"><sup>*</sup>Rilascio Patente:</label>
                                <input type="date" name="patente[rilascio]" required>
                            </div>
                            <div class="field">
                                <label title="Campo Obbligatorio"><sup>*</sup>Scadenza:</label>
                                <input type="date" name="patente[scadenza]" required>
                            </div>
                        </section>
                        <section class="page page4" style="--page: 3">
                            <div class="field">
                                <label title="Campo Obbligatorio">Fronte Patente:</label>
                                <div class="custom-file-upload">
                                    <input type="file" class="file" name="licenseFront" id="licenseFrontForm"  accept="image/jpeg, image/png">
                                    <label for="licenseFrontForm">
                                        <span class="material-symbols-outlined upload-icon">
                                            upload_file
                                        </span>
                                        <span class="upload-text">Carica foto</span>
                                    </label>
                                </div>
                            </div>
                            <div class="field">
                                <label title="Campo Obbligatorio">Retro Patente:</label>
                                <div class="custom-file-upload">
                                    <input type="file" class="file" name="licenseBack" id="licenseBackForm"  accept="image/jpeg, image/png">
                                    <label for="licenseBackForm">
                                        <span class="material-symbols-outlined upload-icon">
                                            upload_file
                                        </span>
                                        <span class="upload-text">Carica foto</span>
                                    </label>
                                </div>
                            </div>
                            <div class="field">
                                <label title="Campo Obbligatorio">Fronte Carta d'Identità:</label>
                                <div class="custom-file-upload">
                                    <input type="file" class="file" name="idCardFront" id="idCardFrontForm"  accept="image/jpeg, image/png">
                                    <label for="idCardFrontForm">
                                        <span class="material-symbols-outlined upload-icon">
                                            upload_file
                                        </span>
                                        <span class="upload-text">Carica foto</span>
                                    </label>
                                </div>
                            </div>
                            <div class="field">
                                <label title="Campo Obbligatorio">Retro Carta d'Identità:</label>
                                <div class="custom-file-upload">
                                    <input type="file" class="file" name="idCardBack" id="idCardBackForm"  accept="image/jpeg, image/png">
                                    <label for="idCardBackForm">
                                        <span class="material-symbols-outlined upload-icon">
                                            upload_file
                                        </span>
                                        <span class="upload-text">Carica foto</span>
                                    </label>
                                </div>
                            </div>
                            <div class="field">
                                <label title="Campo Obbligatorio">Fronte Tessera Sanitaria:</label>
                                <div class="custom-file-upload">
                                    <input type="file" class="file" name="sanitaryFront" id="sanitaryFrontForm"  accept="image/jpeg, image/png">
                                    <label for="sanitaryFrontForm">
                                        <span class="material-symbols-outlined upload-icon">
                                            upload_file
                                        </span>
                                        <span class="upload-text">Carica foto</span>
                                    </label>
                                </div>
                            </div>
                            <div class="field">
                                <label title="Campo Obbligatorio">Retro Tessera Sanitaria:</label>
                                <div class="custom-file-upload">
                                    <input type="file" class="file" name="sanitaryBack" id="sanitaryBackForm"  accept="image/jpeg, image/png">
                                    <label for="sanitaryBackForm">
                                        <span class="material-symbols-outlined upload-icon">
                                            upload_file
                                        </span>
                                        <span class="upload-text">Carica foto</span>
                                    </label>
                                </div>
                            </div>
                            <div class="field termsField">
                                <label title="Campo Obbligatorio"><sup>*</sup>Accetto Termini e Condizioni:</label>
                                <input type="checkbox" name="terms" required>
                            </div>
                        </section>
                    </div>
                <% } %>
                <div class="buttonContainer">
                    <button <%= `${customerId ? 'class=active' : ''}` %> id="userFormBtn" type="submit">Paga</button>
                    <% if (!customerId) { %>
                        <div class="formIconContainer">
                            <span id="prevFormPage" class="material-symbols-outlined disabled prevNextIcons">
                                chevron_left
                            </span>
                            <span id="nextFormPage" class="material-symbols-outlined prevNextIcons">
                                chevron_right
                            </span>
                        </div>
                    <% } %>
                </div>
                <% if (!customerId) { %>
                    <p class="loginAlert">Per semplificare il checkout in futuro <a class="accountLink" id="signup">Crea un Account</a> o se lo hai già <a class="accountLink loginLink">Accedi</a></p>
                <% } %>
            </form>
        </div>
    </div>
    <script>
        function handleInputTabbing(page, nextPageBtn, prevPageBtn) {
            const inputs = page.querySelectorAll('input:not([type="file"]), textarea, select, button');
            if (inputs.length > 0) {
                const lastInput = inputs[inputs.length - 1];
                const firstInput = inputs[0];
                lastInput.addEventListener('keydown', function(event) {
                    if (event.key === 'Tab' && !event.shiftKey) {
                        event.preventDefault();
                        nextPageBtn.click();
                    }
                });
                firstInput.addEventListener('keydown', function(event) {
                    if (event.key === 'Tab' && event.shiftKey) {
                        event.preventDefault();
                        prevPageBtn.click();
                    }
                });
            }else{
                document.activeElement.addEventListener('keydown', function(event) {
                if (event.key === 'Tab' && event.shiftKey) {
                    event.preventDefault();
                    prevPageBtn.click();
                }
            });
            }
        }
        function createPageNavigation(prevButtonId, nextButtonId, pagesClass, submitButtonId) {
    const prevButton = document.getElementById(prevButtonId);
    const nextButton = document.getElementById(nextButtonId);
    
    const submitButton = document.getElementById(submitButtonId);
    let currentPage = 0, isProcessing = false;

    function updatePageVisibility() {
        const pages = document.querySelectorAll(`.${pagesClass}`);
        if(!pages) return;
        pages.forEach((page, index) => {
            if (index === currentPage) {
                page.classList.add('active');
                handleInputTabbing(page, nextButton, prevButton);
            } else {
                page.classList.remove('active');
            }
        });

        prevButton.classList.toggle('disabled', currentPage === 0);
        nextButton.classList.toggle('disabled', currentPage === pages.length - 1);

        if (currentPage === pages.length - 1 || !pages) {
            submitButton.classList.add('active');
        } else {
            submitButton.classList.remove('active');
        }
    }

    function validateUserForm() {
        
        let hasError = false;
        let firstErrorPage = null;
        const pages = document.querySelectorAll(`.${pagesClass}`);
        if(!pages) return;
        pages.forEach((page, index) => {
            const inputs = page.querySelectorAll('.field > *:where(select, input:not([type="checkbox"]))');
            let pageHasError = false;

            inputs.forEach(input => {
                if (!input.checkValidity()) {
                    input.classList.add('show-error');
                    pageHasError = true;
                } else {
                    input.classList.remove('show-error');
                }
            });

            if (pageHasError && firstErrorPage === null) {
                firstErrorPage = index;
                hasError = true;
            }
        });
        
        if (hasError) {
            currentPage = firstErrorPage;
            updatePageVisibility();
        }
        
        return !hasError;
    }

    prevButton.addEventListener('click', () => {
        if (!isProcessing && currentPage > 0) {
            isProcessing = true;
            const pages = document.querySelectorAll(`.${pagesClass}`);
            currentPage--;
            updatePageVisibility();
            setTimeout(() => {
                const inputs = pages[currentPage].querySelectorAll('input:not([type="file"]), textarea, select');
                if(inputs) inputs[inputs.length - 1].focus();
                isProcessing = false;
            }, 500);
        }
    });

    nextButton.addEventListener('click', () => {
        const pages = document.querySelectorAll(`.${pagesClass}`);
        if (!isProcessing && currentPage < pages.length - 1) {
            isProcessing = true;
            currentPage++;
            updatePageVisibility();
            setTimeout(() => {
                const firstInput = pages[currentPage].querySelector('input:not([type="file"]), textarea, select');
                if(firstInput) firstInput.focus();
                isProcessing = false;
            }, 500);
        }
    });

    submitButton.addEventListener('click', (event) => {
        if (!validateUserForm()) {
            event.preventDefault();
        }
    });

    updatePageVisibility();
}
    </script>
    <% if (!customerId) { %>
        <script>
            createPageNavigation('prevFormPage', 'nextFormPage', 'page', 'userFormBtn');
            document.addEventListener('DOMContentLoaded', () => {
                const userForm = document.getElementById('userForm');

                async function handleUserFormSubmit(event){
                    event.preventDefault();
                    if(!document.querySelector('.pagesContainer')){
                        userForm.submit();
                        return;
                    }
                    const formData = new FormData(userForm);
                    const newFormData = {}
                    formData.forEach((value, key) => {
                        const keys = key.split('[').map(k => k.replace(']', ''));
                        keys.reduce((acc, currentKey, index) => {
                            if (index === keys.length - 1) {
                                acc[currentKey] = value;
                            } else {
                                acc[currentKey] = acc[currentKey] || {};
                            }
                            return acc[currentKey];
                        }, newFormData);
                    });
                    try {
                        const response = await fetch('/user/newRent', {
                            method: 'POST',
                            headers: {
                                "Content-Type": "application/json",
                            },
                            body: JSON.stringify(newFormData)
                        });
                    
                        if (!response.ok) {
                            throw new Error('Error creating user');
                        }
                    
                        const data = await response.json();
                        const customerId = data.customerId;
                    
                        const fileData = new FormData();
                        fileData.append('customerId', customerId);
                        const fileFields = [
                            'licenseFrontForm',
                            'licenseBackForm',
                            'idCardFrontForm',
                            'idCardBackForm',
                            'sanitaryFrontForm',
                            'sanitaryBackForm'
                        ];
                    
                        fileFields.forEach(fieldId => {
                            const fileInput = document.getElementById(fieldId).files[0];
                            if (fileInput) {
                                fileData.append(fieldId.replace('Form', ''), fileInput);
                            }
                        });
                        const fileResponse = await fetch('/user/uploadFiles', {
                            method: 'POST',
                            body: fileData
                        });
                        if (!fileResponse.ok) {
                            throw new Error('Error uploading files');
                        }
                        const fileDataResponse = await fileResponse.json();
                        console.log('File caricati con successo:', fileDataResponse);
                    } catch (error) {
                        console.error('Errore:', error);
                    }
                } 
                userForm.addEventListener('submit', handleUserFormSubmit);
            });
        </script>
    <% } %>
    
    


    <%
        let bookedDate = [];
        for(const data of noleggi){
            bookedDate.push(`${data.fromDate}:${data.toDate}`) 
        }
    %>
    <div id="bookings" style="display:none;"><%=bookedDate%></div>
    <script>
        const bookings = document.getElementById('bookings').innerText.split(',');
        const currentDate = document.querySelector('.current-date'),
        daysTag = document.querySelector('.days'),
        prevNextIcons = document.querySelectorAll('.calendarIcons span')

        let date = new Date(),
        today = new Date();
        currYear = date.getFullYear(),
        realYear = date.getFullYear(),
        currMonth = date.getMonth(),
        realMonth = date.getMonth();

        const months = ['gennaio', 'febbrario', 'marzo', 'aprile', 'maggio', 'giugno', 'luglio', 'agosto', 'settembre', 'ottobre', 'novembre', 'dicembre'];

        const renderCalendar = () => {
            let firstDateOfMonth = new Date(currYear, currMonth, 0).getDay(),
            lastDateOfMonth = new Date(currYear, currMonth +1, 0).getDate(),
            lastDateOfLastMonth = new Date(currYear, currMonth, 0).getDate();
            let liTag = '';
            for (let i = firstDateOfMonth; i > 0; i--) {
                let isBooked = false
                const day = String(lastDateOfLastMonth-i+1).padStart(2, '0');
                const month = currMonth == 0 ? 12 : String(currMonth).padStart(2, '0');
                const year = currMonth == 0 ? currYear-1 : currYear;
                const data = `${year}-${month}-${day}`;
                let isExpired = today >= new Date(data) ? 'expired': '';
                bookings.forEach(date => {
                    const [fromDate, toDate] = date.split(':');
                    if(new Date(fromDate) <= new Date(data) && new Date(toDate) >= new Date(data)) isBooked = true;
                });
                let isInRange, isToDate, isFromDate;
                if(fromDate && toDate){
                    isInRange = new Date(fromDate) <= new Date(data) && new Date(toDate) >= new Date(data);
                }
                if(fromDate) isFromDate = fromDate == data;
                if(toDate) isToDate = toDate == data;
                
                liTag += `<li class="inactive ${isExpired} ${isBooked ? 'booked' : ''} ${isInRange || isFromDate || isToDate ? 'selected' : ''}" data-day="${data}">${lastDateOfLastMonth-i+1}</li>`;
            }
            
            for (let i = 1; i <= lastDateOfMonth; i++) {
                let isBooked = false

                const day = String(i).padStart(2, '0');
                const month = String(currMonth+1).padStart(2, '0');
                const year = currYear;
                const data = `${year}-${month}-${day}`;
                let isExpired = today >= new Date(data) ? 'expired': '';
                bookings.forEach(date => {
                    const [fromDate, toDate] = date.split(':');
                    if(new Date(fromDate) <= new Date(data) && new Date(toDate) >= new Date(data)) isBooked = true;
                });
                let isInRange, isToDate, isFromDate;
                if(fromDate && toDate){
                    isInRange = new Date(fromDate) <= new Date(data) && new Date(toDate) >= new Date(data);
                }
                if(fromDate) isFromDate = fromDate == data;
                if(toDate) isToDate = toDate == data;
                liTag += `<li class="${isExpired} ${isBooked ? 'booked' : ''} ${isInRange || isFromDate || isToDate ? 'selected' : ''}" data-day="${data}">${i}</li>`;
            }
            const totalRows = Math.ceil((firstDateOfMonth + lastDateOfMonth)/7);
            const missingDaysOfNextMonth = totalRows*7 - (firstDateOfMonth + lastDateOfMonth);
            for (let i = 1; i <= missingDaysOfNextMonth; i++) {
                let isBooked = false

                const day = String(i).padStart(2, '0');
                const month = currMonth == 11 ? 1 : String(currMonth+2).padStart(2, '0');
                const year = currMonth == 11 ? currYear+1 : currYear;
                const data = `${year}-${month}-${day}`;
                bookings.forEach(date => {
                    const [fromDate, toDate] = date.split(':');
                    if(new Date(fromDate) <= new Date(data) && new Date(toDate) >= new Date(data)) isBooked = true;
                });
                let isInRange, isToDate, isFromDate;
                if(fromDate && toDate){
                    isInRange = new Date(fromDate) <= new Date(data) && new Date(toDate) >= new Date(data);
                }
                if(fromDate) isFromDate = fromDate == data;
                if(toDate) isToDate = toDate == data;
                liTag += `<li class="inactive ${isBooked ? 'booked' : ''} ${isInRange || isFromDate || isToDate ? 'selected' : ''}" data-day="${data}">${i}</li>`;
            }
            currentDate.innerText = `${months[currMonth]} ${currYear}`;
            daysTag.innerHTML = liTag;
            listenerDay();
        }
        renderCalendar();
        const prevIcon = document.getElementById('prev');
        for(const icon of prevNextIcons){
            icon.addEventListener('click', () =>{
                currMonth = icon.id == 'prev' ? currMonth - 1 : currMonth + 1;
                
                if(currMonth < 0 || currMonth > 11){
                    date = new Date(currYear, currMonth);
                    currYear = date.getFullYear();
                    currMonth = date.getMonth();
                    
                }else{
                    date = new Date();
                    if(currMonth <= realMonth && currYear == realYear){
                        prevIcon.style.display = 'none';
                    }else{
                        prevIcon.style.display = '';
                    }
                }
                renderCalendar();
            });
        }

        const priceElements = document.querySelectorAll('.price')
        let prices = [];
        priceElements.forEach( el => prices.push(el.dataset.price - 0));

        const preventivoElement = document.getElementById('preventivoElement');
        var fromDate, toDate, fromDateElement, toDateElement, kmIncluded = preventivoElement.innerText;

        function listenerDay() {
            const days = document.querySelectorAll('.days *');
        
            for (const day of days) {
                const today = new Date();
                if(new Date(day.dataset.day) <= today){
                    if(day.classList.contains('booked')){
                        day.classList.remove('booked')
                    }
                    continue;
                }
                if(day.classList.contains('booked')){
                    continue;
                }
                day.addEventListener('click', () => {
                    if(toDate && fromDate){
                        days.forEach(d => d.classList.remove('selected'));
                        fromDate = '';
                        toDate = '';
                        fromDateElement = '';
                        toDateElement = '';

                        preventivoElement.innerText = '';
                        preventivoElement.style.display = 'none';
                        document.getElementById('userForm').style.display = 'none';
                    }
                    if(!fromDate){
                        day.classList.add(`selected`)
                        fromDate = day.dataset.day;
                        fromDateElement = day
                        return;
                    }
                    day.classList.add(`selected`)
                    if(new Date(day.dataset.day) < new Date(fromDate)){
                        fromDate = day.dataset.day;
                        toDate = '';
                        fromDateElement.classList.remove('selected')
                        fromDateElement = day;
                        toDateElement = '';

                        preventivoElement.innerText = '';
                        return;
                    }
                    
                    toDate = day.dataset.day;
                    toDateElement = day;
                    const fromDateObj = new Date(fromDate);
                    const toDateObj = new Date(toDate);

                    let prevDay;

                    for(const d of days){

                        const currentDay = new Date(d.dataset.day);
                        const isInRange = currentDay >= fromDateObj && currentDay <= toDateObj;

                        if (isInRange && d.classList.contains('booked')) {
                            toDateElement.classList.remove('selected')
                            toDate = prevDay;
                            alert(`Ci spiace il mezzo non è disponibile nella data del ${d.dataset.day.split('-').reverse().join('/')} perciò il noleggio terminerà il ${toDate.split('-').reverse().join('/')}`)
                            break;
                        }
                        if (isInRange) {
                            d.classList.add('selected');
                        }
                        prevDay = d.dataset.day;
                    }
                    let startDay = new Date(fromDate).getDay() - 1;
                    startDay = startDay < 0 ? 6 : startDay;
                    
                    let totalDays = Math.floor((new Date(toDate) - new Date(fromDate)) / (1000 * 60 *60 *24)) + 1;
                    
                    const finalPrice = Array.from({ length: totalDays }, () => prices[startDay++ % 7]).reduce((a, b) => a + b, 0);
                    preventivoElement.innerText = `Il prezzo del noleggio partirà da ${finalPrice} € + IVA ${kmIncluded}` ;
                    preventivoElement.style.display = 'block';
                    document.getElementById('userForm').style.display = 'block';
                    document.getElementById('userForm').scrollIntoView({ behavior: 'smooth' })
                    document.querySelector('[name="fromDate"]').value = fromDate;
                    document.querySelector('[name="toDate"]').value = toDate;
                })
            }
        }
    </script>

<% if (!customerId) { %>
    <article class="modal" id="loginModal">
        <section>
            <span class="material-symbols-outlined closeModal">
                close
            </span>
            <div class="formsContainer" style="--pages: 2;">
                <form class="authForm" id="loginForm" style="--page: 0;">
                    <h2>Accedi</h2>
                    <div class="field">
                        <span class="material-symbols-outlined">
                            mail
                        </span>
                        <input type="email" id="emailLogin" name="email" placeholder="Email" required autocomplete="email">
                    </div>
            
                    <div class="field">
                        <span class="material-symbols-outlined">
                            lock
                        </span>
                        <input type="password" id="passwordLogin" name="password" placeholder="Password" autocomplete="current-password" required>
                    </div>
                    <button id="submitBtn" type="submit">
                        <span class="material-symbols-outlined">
                            login
                        </span>
                        Login
                    </button>
                </form>
                <form class="loginOtpForm authForm otpForm" id="loginOtpForm" style="--page: 1;">
                    <h2>Codice OTP</h2>
                    <input type="hidden" name="id">
                    <div class="otpField">
                        <input type="number" name="digit1" min="0" max="9" maxlength="1" required autofocus>
                        <input type="number" name="digit2" min="0" max="9" maxlength="1" required>
                        <input type="number" name="digit3" min="0" max="9" maxlength="1" required>
                        <input type="number" name="digit4" min="0" max="9" maxlength="1" required>
                        <input type="number" name="digit5" min="0" max="9" maxlength="1" required>
                        <input type="number" name="digit6" min="0" max="9" maxlength="1" required>
                    </div>
                    <p>Inserisci il codice che ti abbiamo inviato via email</p>
                </form>
            </div>
        </section>
    </article>
    <article class="modal" id="signupModal">
        <section>
            <span class="material-symbols-outlined closeModal">
                close
            </span>
            <div class="formsContainer" style="--pages: 2;">
                <form autocomplete="off" class="authForm" id="signupForm" style="--page: 0;">
                    <div class="signupPagesContainer" style="--pages: 4">
                        <section class="signupPage active" style="--page: 0">
                            <h2>Registrati</h2>
                            <div class="field">
                                <label title="Campo Obbligatorio"><sup>*</sup>Nome:</label>
                                <input type="text" name="nome" required>
                            </div>
                            <div class="field">
                                <label title="Campo Obbligatorio"><sup>*</sup>Cognome:</label>
                                <input type="text" name="cognome" required>
                            </div>
                            <div class="field">
                                <label title="Campo Obbligatorio"><sup>*</sup>Codice Fiscale:</label>
                                <input type="text" name="cf" required>
                            </div>
                            <div class="field">
                                <label>Codice Univoco:</label>
                                <input type="text" name="cUnivoco">
                            </div>
                            <div class="field">
                                <label>Partita IVA:</label>
                                <input type="text" name="pIva">
                            </div>
                            <div class="field">
                                <label title="Campo Obbligatorio"><sup>*</sup>Email:</label>
                                <input type="email" name="contatti[email]" autocomplete="email" required>
                            </div>
                            <div class="field">
                                <label title="Campo Obbligatorio"><sup>*</sup>Tel:</label>
                                <input type="tel" name="contatti[tel]" autocomplete="tel" required>
                            </div>
                            <div class="field">
                                <label >Pec:</label>
                                <input type="text" name="contatti[pec]">
                            </div>
                        </section>
                        <section class="signupPage" style="--page: 1">
                            <h2 style="font-size: 1.4rem;">Residenza</h2>
                            <div class="field">
                                <label title="Campo Obbligatorio"><sup>*</sup>Via:</label>
                                <input type="text" name="residenza[via]" autocomplete="street-address" required>
                            </div>
                            <div class="field">
                                <label title="Campo Obbligatorio"><sup>*</sup>Civico:</label>
                                <input type="text" name="residenza[nCivico]" required>
                            </div>
                            <div class="field">
                                <label title="Campo Obbligatorio"><sup>*</sup>CAP:</label>
                                <input type="text" name="residenza[cap]" autocomplete="postal-code" required>
                            </div>
                            <div class="field">
                                <label title="Campo Obbligatorio"><sup>*</sup>Comune:</label>
                                <input type="text" name="residenza[comune]" autocomplete="address-level2" required>
                            </div>
                            <div class="field">
                                <label title="Campo Obbligatorio"><sup>*</sup>Provincia:</label>
                                <input type="text" name="residenza[provincia]" autocomplete="address-level1" required>
                            </div>
                        </section>
                        <section class="signupPage" style="--page: 2">
                            <h2 style="font-size: 1.4rem;">Patente</h2>
                            <div class="field">
                                <label title="Campo Obbligatorio"><sup>*</sup>Numero Patente:</label>
                                <input type="text" name="patente[numero]" required>
                            </div>
                            <div class="field">
                                <label>Rilasciata Da:</label>
                                <input type="text" name="patente[daUfficio]">
                            </div>
                            <div class="field">
                                <label title="Campo Obbligatorio"><sup>*</sup>Rilascio Patente:</label>
                                <input type="date" name="patente[rilascio]" required>
                            </div>
                            <div class="field">
                                <label title="Campo Obbligatorio"><sup>*</sup>Scadenza:</label>
                                <input type="date" name="patente[scadenza]" required>
                            </div>
                            <div class="field">
                                <label title="Campo Obbligatorio"><sup>*</sup>Crea una Password:</label>
                                <input type="password" name="password" autocomplete="new-password" required>
                            </div>
                            <div class="field termsField">
                                <label title="Campo Obbligatorio"><sup>*</sup>Accetto Termini e Condizioni:</label>
                                <input type="checkbox" name="terms" required>
                            </div>
                        </section>
                        <section class="signupPage" style="--page: 3">
                            <h2>Documenti</h2>
                            <div class="field">
                                <label title="Campo Obbligatorio">Fronte Patente:</label>
                                <div class="custom-file-upload">
                                    <input type="file" class="file" name="licenseFront" id="licenseFrontSignup"  accept="image/jpeg, image/png">
                                    <label for="licenseFrontSignup">
                                        <span class="material-symbols-outlined upload-icon">
                                            upload_file
                                        </span>
                                        <span class="upload-text">Carica foto</span>
                                    </label>
                                </div>
                            </div>
                            <div class="field">
                                <label title="Campo Obbligatorio">Retro Patente:</label>
                                <div class="custom-file-upload">
                                    <input type="file" class="file" name="licenseBack" id="licenseBackSignup"  accept="image/jpeg, image/png">
                                    <label for="licenseBackSignup">
                                        <span class="material-symbols-outlined upload-icon">
                                            upload_file
                                        </span>
                                        <span class="upload-text">Carica foto</span>
                                    </label>
                                </div>
                            </div>
                            <div class="field">
                                <label title="Campo Obbligatorio">Fronte Carta d'Identità:</label>
                                <div class="custom-file-upload">
                                    <input type="file" class="file" name="idCardFront" id="idCardFrontSignup"  accept="image/jpeg, image/png">
                                    <label for="idCardFrontSignup">
                                        <span class="material-symbols-outlined upload-icon">
                                            upload_file
                                        </span>
                                        <span class="upload-text">Carica foto</span>
                                    </label>
                                </div>
                            </div>
                            <div class="field">
                                <label title="Campo Obbligatorio">Retro Carta d'Identità:</label>
                                <div class="custom-file-upload">
                                    <input type="file" class="file" name="idCardBack" id="idCardBackSignup"  accept="image/jpeg, image/png">
                                    <label for="idCardBackSignup">
                                        <span class="material-symbols-outlined upload-icon">
                                            upload_file
                                        </span>
                                        <span class="upload-text">Carica foto</span>
                                    </label>
                                </div>
                            </div>
                            <div class="field">
                                <label title="Campo Obbligatorio">Fronte Tessera Sanitaria:</label>
                                <div class="custom-file-upload">
                                    <input type="file" class="file" name="sanitaryFront" id="sanitaryFrontSignup"  accept="image/jpeg, image/png">
                                    <label for="sanitaryFrontSignup">
                                        <span class="material-symbols-outlined upload-icon">
                                            upload_file
                                        </span>
                                        <span class="upload-text">Carica foto</span>
                                    </label>
                                </div>
                            </div>
                            <div class="field">
                                <label title="Campo Obbligatorio">Retro Tessera Sanitaria:</label>
                                <div class="custom-file-upload">
                                    <input type="file" class="file" name="sanitaryBack" id="sanitaryBackSignup"  accept="image/jpeg, image/png">
                                    <label for="sanitaryBackSignup">
                                        <span class="material-symbols-outlined upload-icon">
                                            upload_file
                                        </span>
                                        <span class="upload-text">Carica foto</span>
                                    </label>
                                </div>
                            </div>
                        </section>
                    </div>
                    <div class="formIconContainer" style="margin-top: auto;">
                        <span id="prevSignupPage" class="material-symbols-outlined disabled prevNextIcons">
                            chevron_left
                        </span>
                        <button id="signupSubmit" type="submit">
                            <span class="material-symbols-outlined">
                                login
                            </span>
                            Registrati
                        </button>
                        <span id="nextSignupPage" class="material-symbols-outlined prevNextIcons">
                            chevron_right
                        </span>
                    </div>

                </form>
                <form class="signupOtpForm authForm otpForm" id="signupOtpForm" style="--page: 1;">
                    <h2>Codice OTP</h2>
                    <input type="hidden" name="id">
                    <div class="otpField">
                        <input type="number" name="digit1" min="0" max="9" maxlength="1" required autofocus>
                        <input type="number" name="digit2" min="0" max="9" maxlength="1" required>
                        <input type="number" name="digit3" min="0" max="9" maxlength="1" required>
                        <input type="number" name="digit4" min="0" max="9" maxlength="1" required>
                        <input type="number" name="digit5" min="0" max="9" maxlength="1" required>
                        <input type="number" name="digit6" min="0" max="9" maxlength="1" required>
                    </div>
                    <p>Inserisci il codice che ti abbiamo inviato via email</p>
                </form>
            </div>
        </section>
    </article>
    <script>
        const loginBtns = document.querySelectorAll('.loginLink');
        const loginModal = document.getElementById('loginModal');
        const loginForm = document.getElementById('loginForm');
        const emailLoginInput = document.getElementById('emailLogin');
        for(const btn of loginBtns){
            btn.addEventListener('click', () => {
                loginModal.classList.add('active');
                loginForm.classList.add('active');
                emailLoginInput.focus();
            });
        }

        
        const loginInputs = document.querySelectorAll('#loginForm input');
        loginForm.addEventListener('submit', async (event) => {
            event.preventDefault();

            const formData = new FormData(loginForm);
            const newFormData = {}
            formData.forEach((value, key) => (newFormData[key] = value));
            try {
                const response = await fetch('/user/login', {
                    method: 'POST',
                    headers: {
                    "Content-Type": "application/json",
                    },
                    body: JSON.stringify(newFormData)
                });

                if (response.ok) {
                    const dati = await response.json();
                    const id = dati.id;
                    const loginOtpForm = document.getElementById('loginOtpForm');
                    loginOtpForm.querySelector('input[name="id"]').value = id;
                    loginOtpForm.classList.add('active');
                    loginForm.classList.remove('active');
                    for(const input of loginInputs){
                        input.value = '';
                    }
                    loginOtpForm.querySelector('[name="digit1"]').focus();
                } else {
                    const error = await response.json();
                    if (response.status == 401) {
                        if(error.accountExist === false){
                            console.log('Account non esistente')
                        }
                        if(error.wrongCredentials){
                            console.log('Credenziali errate')
                        }
                    }
                }
            } catch (error) {
                console.error('Error during login:', error);
            }
        });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            createPageNavigation('prevSignupPage', 'nextSignupPage', 'signupPage', 'signupSubmit');
            const signupBtn = document.getElementById('signup');
            const signupModal = document.getElementById('signupModal');
            const signupForm = document.getElementById('signupForm');
            const signupOtpForm = document.getElementById('signupOtpForm');
            const signupSubmitBtn = document.getElementById('signupSubmit');
            
            signupBtn.addEventListener('click', () => {
                signupModal.classList.add('active');
                signupForm.classList.add('active');
            });

            signupForm.addEventListener('submit', async (event) => {
                event.preventDefault();
                signupSubmitBtn.classList.add('loading');
                const formData = new FormData(signupForm);
                const newFormData = {};

                formData.forEach((value, key) => {
                    const keys = key.split('[').map(k => k.replace(']', ''));
                    keys.reduce((acc, currentKey, index) => {
                        if (index === keys.length - 1) {
                            acc[currentKey] = value;
                        } else {
                            acc[currentKey] = acc[currentKey] || {};
                        }
                        return acc[currentKey];
                    }, newFormData);
                });

                try {
                    const response = await fetch('/user/signup', {
                        method: 'POST',
                        headers: {
                            "Content-Type": "application/json",
                        },
                        body: JSON.stringify(newFormData)
                    });

                    if (!response.ok) {
                        throw new Error('Error registering user');
                    }

                    const data = await response.json();
                    // const userId = data.userId;
                    console.log(data)

                    if(data.exist){
                        return console.log(`Esiste già un'account con questa email`);
                    }


                    const fileData = new FormData();

                    const fileFields = [
                        'licenseFrontSignup',
                        'licenseBackSignup',
                        'idCardFrontSignup',
                        'idCardBackSignup',
                        'sanitaryFrontSignup',
                        'sanitaryBackSignup'
                    ];
                    fileData.append('customerId', data.id);
                    if(data.needVerification){
                        fileData.append('needVerification', 'yes');
                    }
                    fileFields.forEach(fieldId => {
                        const fileInput = document.getElementById(fieldId).files[0];
                        if (fileInput) {
                            fileData.append(fieldId.replace('Signup', ''), fileInput);
                        }
                    });
                    const fileResponse = await fetch('/user/uploadFiles', {
                        method: 'POST',
                        body: fileData
                    });

                    if (!fileResponse.ok) {
                        throw new Error('Error uploading files');
                    }

                    const fileDataResponse = await fileResponse.json();
                    console.log('Files uploaded successfully:', fileDataResponse);

                    // Move to OTP form after successful registration
                    signupOtpForm.querySelector('input[name="id"]').value = data.id;
                    signupOtpForm.classList.add('active');
                    signupForm.classList.remove('active');

                } catch (error) {
                    console.error('Error during registration:', error);
                }
            });
        });
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const signupOtpForm = document.getElementById('signupOtpForm');
            const loginOtpForm = document.getElementById('loginOtpForm');
            
            function setupOtpForm(otpForm, verifyEndpoint) {
                const otpInputs = otpForm.querySelectorAll('input[type="number"]');
                const previousOTPValues = Array.from(otpInputs).map(input => input.value);
            
                async function checkAllFilled() {
                    const allFilled = Array.from(otpInputs).every(input => input.value.length > 0);
                    let currentIndex = Array.from(otpInputs).indexOf(document.activeElement);
                    // currentIndex = otpForm.classList[0] == 'loginOtpForm' ? (currentIndex < 0 ? 5 : currentIndex - 1) : currentIndex
                    if (otpForm.classList[0] === 'loginOtpForm') {
                        if (currentIndex < 0) {
                            currentIndex = otpInputs.length - 1;
                        } else if (currentIndex > 0) {
                            currentIndex -= 1;
                        }
                    }
                
                    if (allFilled && otpInputs[currentIndex].value !== previousOTPValues[currentIndex]) {
                        previousOTPValues[currentIndex] = otpInputs[currentIndex].value;
                    
                        const formData = new FormData(otpForm);
                        const newFormData = {};
                        formData.forEach((value, key) => (newFormData[key] = value));
                    
                        try {
                            const response = await fetch(verifyEndpoint, {
                                method: 'POST',
                                headers: {
                                    "Content-Type": "application/json",
                                },
                                body: JSON.stringify(newFormData)
                            });
                        
                            if (response.ok) {
                                const data = await response.json();
                                const { token, maxAge } = data;
                                document.cookie = `userToken=${token}; path=/; max-age=${maxAge}`;
                            
                                otpInputs.forEach(input => {
                                    input.value = '';
                                });
                                otpForm.classList.remove('active');
                                otpForm.closest('.modal').classList.remove('active');
                                setTimeout(() => {
                                    document.querySelectorAll('.modal').forEach(modal => modal.remove());
                                }, 500);
                            
                                document.getElementById('userForm').action = '/user/newRent';
                                document.getElementById('userForm').method = 'POST';
                                document.getElementById('userForm').enctype = '';
                                document.getElementById('userFormBtn').classList.add('active');
                                document.querySelector('.formIconContainer').remove();
                                document.querySelector('.pagesContainer').remove();
                                document.querySelector('.loginAlert').remove();
                            } else {
                                const error = await response.json();
                                if (response.status === 401) {
                                    if (error.otpMatched === false) {
                                        console.log('Invalid OTP code');
                                    }
                                } else {
                                    console.log('General error');
                                }
                            }
                        } catch (error) {
                            console.error('Error during OTP verification:', error);
                        }
                    }
                }
            
                otpInputs.forEach(input => {
                    input.addEventListener('input', () => {
                        checkAllFilled();
                        const index = Array.from(otpInputs).indexOf(input);
                        previousOTPValues[index] = input.value;
                    });
                });
            }
        
            setupOtpForm(signupOtpForm, '/user/otp');
            setupOtpForm(loginOtpForm, '/user/otp');
        });
    </script>
    <script src="/scripts/utils/auth/otp.js"></script>
    <script>
        const fileInputs = document.querySelectorAll('.file');
        for(const input of fileInputs){
            input.addEventListener('change', () => {
                const label = document.querySelector(`label[for="${input.id}"]`);
                label.childNodes[1].innerText = 'done_outline';
                label.childNodes[3].innerText = 'Caricata'
            })
        }
    </script>
    <script>
        document.querySelectorAll('.closeModal').forEach(btn => {
            btn.addEventListener('click', () => {
                btn.closest('section').querySelector('form.active').classList.remove('active');
                btn.closest('.modal').classList.remove('active');
            });
        })
    </script>
<% } %>
    </main>
</body>
</html>
